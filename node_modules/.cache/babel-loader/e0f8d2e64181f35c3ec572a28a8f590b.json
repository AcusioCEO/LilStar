{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _actionArea = require('../style/actionArea');\n\nvar _actionArea2 = _interopRequireDefault(_actionArea);\n\nvar _helpers = require('../utils/helpers');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar actionAreaPropTypes = {\n  activeStyle: _propTypes2.default.object,\n  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),\n  hoverStyle: _propTypes2.default.object,\n  onTouchStart: _propTypes2.default.func,\n  onTouchEnd: _propTypes2.default.func,\n  onTouchCancel: _propTypes2.default.func,\n  onMouseDown: _propTypes2.default.func,\n  onMouseEnter: _propTypes2.default.func,\n  onMouseLeave: _propTypes2.default.func,\n  // TODO investigate how we solve mouseUp in other compents (like the right click edgecase)\n  onMouseUp: _propTypes2.default.func,\n  onUpdate: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  style: _propTypes2.default.object\n};\n\nfunction sanitizeChildProps(properties) {\n  return (0, _helpers.omit)(properties, Object.keys(actionAreaPropTypes));\n}\n/**\n * ActionArea\n *\n * The purpose of this component is to provide a button like behaviour for a\n * click like interaction within other components. Button can't be used in such\n * cases as it always will have it's own focus which is not desired in\n * components like DatePicker e.g. next month button.\n *\n * Note: Use the ActionArea's onUpdate instead of onClick as otherwise on iOS9\n * the ActionArea will trigger onFocus for it's parent with a set tabindex.\n */\n\n\nvar ActionArea = function (_Component) {\n  _inherits(ActionArea, _Component);\n\n  function ActionArea(properties) {\n    _classCallCheck(this, ActionArea);\n\n    var _this = _possibleConstructorReturn(this, (ActionArea.__proto__ || Object.getPrototypeOf(ActionArea)).call(this, properties));\n\n    _this.state = {\n      // Note: On touch devices mouseEnter is fired while mouseLeave is not.\n      // This would result in a hover effect that keeps active until another\n      // element is focused on. This would result in the same behaviour as using\n      // the :hover pseudo class. To prevent it from happening activating the\n      // hover state is prevented when a touch event has been triggered before.\n      // source: http://stackoverflow.com/a/22444532/837709\n      isIgnoringHover: false,\n      isActive: false,\n      isHovered: false\n    };\n\n    _this._onMouseEnter = function (event) {\n      if (!_this.state.isIgnoringHover) {\n        _this.setState({\n          isHovered: true,\n          isIgnoringHover: false\n        });\n      }\n\n      if (_this.props.onMouseEnter) {\n        _this.props.onMouseEnter(event);\n      }\n    };\n\n    _this._onMouseLeave = function (event) {\n      _this.setState({\n        isHovered: false\n      });\n\n      if (_this.props.onMouseLeave) {\n        _this.props.onMouseLeave(event);\n      }\n    };\n\n    _this._onMouseDown = function (event) {\n      if (event.button === 0) {\n        _this.setState({\n          isActive: true\n        });\n      }\n\n      if (_this.props.onMouseDown) {\n        _this.props.onMouseDown(event);\n      }\n    };\n\n    _this._onMouseUp = function (event) {\n      if (event.button === 0) {\n        _this.setState({\n          isActive: false\n        });\n      }\n\n      if (_this.props.onMouseUp) {\n        _this.props.onMouseUp(event);\n      }\n    };\n\n    _this._onTouchStart = function (event) {\n      if (event.touches.length === 1) {\n        _this.setState({\n          isActive: true,\n          isIgnoringHover: true\n        });\n      }\n\n      if (_this.props.onTouchStart) {\n        _this.props.onTouchStart(event);\n      }\n    };\n\n    _this._onTouchEnd = function () {\n      _this.setState({\n        isActive: false,\n        isIgnoringHover: true\n      });\n\n      if (_this.props.onTouchEnd) {\n        _this.props.onTouchEnd(event);\n      }\n    };\n\n    _this._onTouchCancel = function () {\n      _this.setState({\n        isActive: false,\n        isIgnoringHover: true\n      });\n\n      if (_this.props.onTouchCancel) {\n        _this.props.onTouchCancel(event);\n      }\n    };\n\n    _this._onClick = function (event) {\n      if (_this.props.onClick) {\n        _this.props.onClick(event);\n      }\n\n      if (_this.props.onUpdate) {\n        _this.props.onUpdate({});\n      }\n    };\n\n    _this.childProps = sanitizeChildProps(properties);\n    return _this;\n  }\n\n  _createClass(ActionArea, [{\n    key: 'componentWillReceiveProps',\n\n    /**\n     * Update the childProps based on the updated properties passed to the card.\n     */\n    value: function componentWillReceiveProps(properties) {\n      this.childProps = sanitizeChildProps(properties);\n    }\n    /**\n     * As soon as the mouse enters the component the isHovered state is activated.\n     *\n     * The state isHovered is not set to true in case onMouseEnter was triggered\n     * by a touch event.\n     */\n\n    /**\n     * Deactivate the isHovered state.\n     */\n\n    /**\n     * Activates the active state in case the main mouse button was pressed.\n     */\n\n    /**\n     * Triggers onUpdate in case the mouse button was pressed on this element.\n     *\n     * In addition the active state is deactivated.\n     */\n\n    /**\n     * Updates the button to be active and makes sure the next onMouseEnter is\n     * ignored.\n     */\n\n    /**\n     * Triggers onUpdate in case the touch event started on this element and makes\n     * sure the next onMouseEnter is ignored.\n     */\n\n    /**\n     * Updates the button to be release and makes sure the next onMouseEnter is\n     * ignored.\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var style = _extends({}, _actionArea2.default.style, this.props.style);\n\n      if (this.state.isHovered) {\n        style = _extends({}, style, _actionArea2.default.hoverStyle, this.props.hoverStyle);\n      }\n\n      if (this.state.isActive) {\n        style = _extends({}, style, _actionArea2.default.activeStyle, this.props.activeStyle);\n      }\n\n      return _react2.default.createElement('div', _extends({\n        role: 'button'\n      }, this.childProps, {\n        onMouseDown: this._onMouseDown,\n        onMouseUp: this._onMouseUp,\n        onMouseEnter: this._onMouseEnter,\n        onMouseLeave: this._onMouseLeave,\n        onTouchStart: this._onTouchStart,\n        onTouchEnd: this._onTouchEnd,\n        onTouchCancel: this._onTouchCancel,\n        onClick: this._onClick,\n        style: style\n      }), this.props.children);\n    }\n  }]);\n\n  return ActionArea;\n}(_react.Component);\n\nActionArea.displayName = 'ActionArea';\nActionArea.propTypes = actionAreaPropTypes;\nexports.default = ActionArea;","map":null,"metadata":{},"sourceType":"script"}