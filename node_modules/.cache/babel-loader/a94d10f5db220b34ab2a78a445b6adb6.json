{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = calculateTextareaHeight;\n\nvar _exenv = require('exenv'); // our height calculation logic is not compatible with jsdom\n\n\nvar isNodeTest = typeof process !== 'undefined' && process.env.NODE_ENV === 'test';\nvar canUseDOM = _exenv.canUseDOM && !isNodeTest;\nvar hiddenTextarea = void 0;\nvar computedStyleCache = {}; // !important is used here to avoid side-effects from global set CSS.\n\nvar hiddenTextareaStyle = '\\n  min-height:none !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n';\nvar stylesToCopy = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\n/**\n * Returns an object containing the computed style and the combined vertical\n * padding size, combined vertical border size and box-sizing value.\n *\n * This style is returned as string to be applied as attribute of an element.\n */\n\nfunction calculateStyling(node) {\n  var reactId = node.getAttribute('data-reactid'); // calculate the computed style only once it's not in the cache\n\n  if (!computedStyleCache[reactId]) {\n    // In order to work with legacy browsers the second paramter for pseudoClass\n    // has to be provided http://caniuse.com/#feat=getcomputedstyle\n    var computedStyle = window.getComputedStyle(node, null);\n    var boxSizing = computedStyle.getPropertyValue('box-sizing') || computedStyle.getPropertyValue('-moz-box-sizing') || computedStyle.getPropertyValue('-webkit-box-sizing');\n    var verticalPaddingSize = 0;\n    verticalPaddingSize = parseFloat(computedStyle.getPropertyValue('padding-bottom')) + parseFloat(computedStyle.getPropertyValue('padding-top'));\n    var verticalBorderSize = 0;\n    verticalBorderSize = parseFloat(computedStyle.getPropertyValue('border-bottom-width')) + parseFloat(computedStyle.getPropertyValue('border-top-width'));\n    var sizingStyle = stylesToCopy.map(function (styleName) {\n      return styleName + ':' + computedStyle.getPropertyValue(styleName) + '  !important';\n    }).join(';'); // store the style, vertical padding size, vertical border size and\n    // boxSizing inside the cache\n\n    computedStyleCache[reactId] = {\n      style: sizingStyle,\n      verticalPaddingSize: verticalPaddingSize,\n      verticalBorderSize: verticalBorderSize,\n      boxSizing: boxSizing\n    };\n  }\n\n  return computedStyleCache[reactId];\n}\n/**\n * Returns an object containing height of the textare as if all the content\n * would be visible. The minHeight & maxHeight are in the object as well and are\n * based on minRows & maxRows.\n *\n * In order to improve the performance a hidden textarea is added to the DOM\n * and used for further caluculations. In addition the styling of each textarea\n * is cached to improve performance.\n */\n\n\nfunction calculateTextareaHeight(textareaElement) {\n  var textareaValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var minHeight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var maxHeight = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null; // Regarding textareaValue: IE will return a height of 0 in case the textare is empty.\n  // To prevent reducing the size to 0 we simply use a dummy text.\n\n  if (!canUseDOM) {\n    return 0;\n  }\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    document.body.appendChild(hiddenTextarea);\n    hiddenTextarea.setAttribute('class', 'belle-input-helper');\n  }\n\n  var _calculateStyling = calculateStyling(textareaElement),\n      style = _calculateStyling.style,\n      verticalPaddingSize = _calculateStyling.verticalPaddingSize,\n      verticalBorderSize = _calculateStyling.verticalBorderSize,\n      boxSizing = _calculateStyling.boxSizing;\n\n  hiddenTextarea.setAttribute('style', style + ';' + hiddenTextareaStyle);\n  hiddenTextarea.value = textareaValue;\n  var calculatedMinHeight = void 0;\n  var calculatedMaxHeight = void 0;\n  var height = hiddenTextarea.scrollHeight; // for a textarea with border-box, the border width has to be added while\n  // for content-box it's necessary to subtract the padding\n\n  if (boxSizing === 'border-box') {\n    // border-box: content + padding + border\n    height = height + verticalBorderSize;\n  } else if (boxSizing === 'content-box') {\n    // content-box: content\n    height = height - verticalPaddingSize;\n  }\n\n  if (minRows !== null && minHeight === null || maxRows !== null && maxHeight === null) {\n    // measure height of a textarea with a single row\n    hiddenTextarea.value = '-';\n    var singleRowHeight = hiddenTextarea.scrollHeight - verticalPaddingSize;\n\n    if (minRows !== null && minHeight === null) {\n      calculatedMinHeight = singleRowHeight * minRows;\n\n      if (boxSizing === 'border-box') {\n        calculatedMinHeight = calculatedMinHeight + verticalPaddingSize + verticalBorderSize;\n      }\n    }\n\n    if (maxRows !== null && maxHeight === null) {\n      calculatedMaxHeight = singleRowHeight * maxRows;\n\n      if (boxSizing === 'border-box') {\n        calculatedMaxHeight = calculatedMaxHeight + verticalPaddingSize + verticalBorderSize;\n      }\n    }\n  }\n\n  var finalMinHeight = minHeight || calculatedMinHeight;\n\n  if (finalMinHeight) {\n    height = Math.max(finalMinHeight, height);\n  }\n\n  var finalMaxHeight = maxHeight || calculatedMaxHeight;\n\n  if (finalMaxHeight) {\n    height = Math.min(finalMaxHeight, height);\n  }\n\n  return height;\n}","map":null,"metadata":{},"sourceType":"script"}