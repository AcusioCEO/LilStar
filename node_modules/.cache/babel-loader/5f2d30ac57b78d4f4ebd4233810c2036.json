{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './MusicPlayer.css';\n\nvar MusicPlayer = function (_Component) {\n  _inherits(MusicPlayer, _Component);\n\n  function MusicPlayer(props) {\n    _classCallCheck(this, MusicPlayer);\n\n    var _this = _possibleConstructorReturn(this, (MusicPlayer.__proto__ || Object.getPrototypeOf(MusicPlayer)).call(this, props));\n\n    _this.state = {\n      activeMusicIndex: 0,\n      leftTime: 0,\n      play: _this.props.autoplay || false,\n      playMode: 'loop',\n      progress: 0,\n      volume: 1\n    };\n    _this.modeList = ['loop', 'random', 'repeat'];\n    return _this;\n  }\n\n  _createClass(MusicPlayer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var audioContainer = this.audioContainer;\n      audioContainer.addEventListener('timeupdate', this.updateProgress.bind(this));\n      audioContainer.addEventListener('ended', this.end.bind(this));\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var audioContainer = this.audioContainer;\n      audioContainer.removeEventListener('timeupdate', this.updateProgress.bind(this));\n      audioContainer.removeEventListener('ended', this.end.bind(this));\n    }\n  }, {\n    key: 'updateProgress',\n    value: function updateProgress() {\n      var duration = this.audioContainer.duration;\n      var currentTime = this.audioContainer.currentTime;\n      var progress = currentTime / duration;\n      this.setState({\n        progress: progress,\n        leftTime: duration - currentTime\n      });\n    }\n  }, {\n    key: 'end',\n    value: function end() {\n      this.handleNext();\n    }\n  }, {\n    key: 'handleAdjustProgress',\n    value: function handleAdjustProgress(e) {\n      var _this2 = this;\n\n      var progressContainer = this.progressContainer;\n      var progress = (e.clientX - progressContainer.getBoundingClientRect().left) / progressContainer.clientWidth;\n      var currentTime = this.audioContainer.duration * progress;\n      this.audioContainer.currentTime = currentTime;\n      this.setState({\n        play: true,\n        progress: progress\n      }, function () {\n        _this2.audioContainer.play();\n      });\n    }\n  }, {\n    key: 'handleAdjustVolume',\n    value: function handleAdjustVolume(e) {\n      var volumeContainer = this.volumeContainer;\n      var volume = (e.clientX - volumeContainer.getBoundingClientRect().left) / volumeContainer.clientWidth;\n      volume = volume < 0 ? 0 : volume;\n      this.audioContainer.volume = volume;\n      this.setState({\n        volume: volume\n      });\n    }\n  }, {\n    key: 'handleToggle',\n    value: function handleToggle() {\n      this.state.play ? this.audioContainer.pause() : this.audioContainer.play();\n      this.setState({\n        play: !this.state.play\n      });\n    }\n  }, {\n    key: 'handlePrev',\n    value: function handlePrev() {\n      var _state = this.state,\n          playMode = _state.playMode,\n          activeMusicIndex = _state.activeMusicIndex;\n\n      if (playMode === 'repeat') {\n        this._playMusic(activeMusicIndex);\n      } else if (playMode === 'loop') {\n        var total = this.props.playlist.length;\n        var index = activeMusicIndex > 0 ? activeMusicIndex - 1 : total - 1;\n\n        this._playMusic(index);\n      } else if (playMode === 'random') {\n        var randomIndex = Math.floor(Math.random() * this.props.playlist.length);\n\n        while (randomIndex === activeMusicIndex) {\n          randomIndex = Math.floor(Math.random() * this.props.playlist.length);\n        }\n\n        this._playMusic(randomIndex);\n      } else {\n        this.setState({\n          play: false\n        });\n      }\n    }\n  }, {\n    key: 'handleNext',\n    value: function handleNext() {\n      var _state2 = this.state,\n          playMode = _state2.playMode,\n          activeMusicIndex = _state2.activeMusicIndex;\n\n      if (playMode === 'repeat') {\n        this._playMusic(activeMusicIndex);\n      } else if (playMode === 'loop') {\n        var total = this.props.playlist.length;\n        var index = activeMusicIndex < total - 1 ? activeMusicIndex + 1 : 0;\n\n        this._playMusic(index);\n      } else if (playMode === 'random') {\n        var randomIndex = Math.floor(Math.random() * this.props.playlist.length);\n\n        while (randomIndex === activeMusicIndex) {\n          randomIndex = Math.floor(Math.random() * this.props.playlist.length);\n        }\n\n        this._playMusic(randomIndex);\n      } else {\n        this.setState({\n          play: false\n        });\n      }\n    }\n  }, {\n    key: 'handleChangePlayMode',\n    value: function handleChangePlayMode() {\n      var index = this.modeList.indexOf(this.state.playMode);\n      index = (index + 1) % this.modeList.length;\n      this.setState({\n        playMode: this.modeList[index]\n      });\n    }\n  }, {\n    key: '_playMusic',\n    value: function _playMusic(index) {\n      var _this3 = this;\n\n      this.setState({\n        activeMusicIndex: index,\n        leftTime: 0,\n        play: true,\n        progress: 0\n      }, function () {\n        _this3.audioContainer.currentTime = 0;\n\n        _this3.audioContainer.play();\n      });\n    }\n  }, {\n    key: '_formatTime',\n    value: function _formatTime(time) {\n      if (isNaN(time) || time === 0) {\n        return;\n      }\n\n      var mins = Math.floor(time / 60);\n      var secs = (time % 60).toFixed();\n      return '' + (mins < 10 ? '0' : '') + mins + ':' + (secs < 10 ? '0' : '') + secs;\n    }\n  }, {\n    key: '_processArtistName',\n    value: function _processArtistName(artistList) {\n      return artistList.join(' / ');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props = this.props,\n          progressColor = _props.progressColor,\n          btnColor = _props.btnColor,\n          playlist = _props.playlist;\n      var _state3 = this.state,\n          activeMusicIndex = _state3.activeMusicIndex,\n          playMode = _state3.playMode;\n      var activeMusic = playlist[activeMusicIndex];\n      var playModeClass = playMode === 'loop' ? 'refresh' : playMode === 'random' ? 'random' : 'repeat';\n      var btnStyle = {\n        color: btnColor\n      };\n      var progressStyle = {\n        width: this.state.progress * 100 + '%',\n        backgroundColor: progressColor\n      };\n      return React.createElement('div', {\n        className: 'player-container',\n        style: this.props.style\n      }, React.createElement('audio', {\n        autoPlay: this.state.play,\n        preload: 'auto',\n        ref: function ref(_ref) {\n          _this4.audioContainer = _ref;\n        },\n        src: activeMusic.url\n      }), React.createElement('div', {\n        className: 'info-and-control'\n      }, React.createElement('div', {\n        className: 'music-info'\n      }, React.createElement('h2', {\n        className: 'title'\n      }, activeMusic.title), React.createElement('h3', {\n        className: 'artist'\n      }, this._processArtistName(activeMusic.artist))), React.createElement('div', {\n        className: 'time-and-volume'\n      }, React.createElement('div', {\n        className: 'left-time'\n      }, '-', this._formatTime(this.state.leftTime)), React.createElement('div', {\n        className: 'volume-container'\n      }, React.createElement('div', {\n        className: 'volume-icon'\n      }, React.createElement('i', {\n        className: 'icon fa fa-volume-up'\n      })), React.createElement('div', {\n        className: 'volume-wrapper'\n      }, React.createElement('div', {\n        className: 'progress-container',\n        onClick: this.handleAdjustVolume.bind(this),\n        ref: function ref(_ref2) {\n          _this4.volumeContainer = _ref2;\n        }\n      }, React.createElement('div', {\n        className: 'progress',\n        style: {\n          width: this.state.volume * 100 + '%'\n        }\n      }))))), React.createElement('div', {\n        className: 'progress-container',\n        onClick: this.handleAdjustProgress.bind(this),\n        ref: function ref(_ref3) {\n          _this4.progressContainer = _ref3;\n        }\n      }, React.createElement('div', {\n        className: 'progress',\n        style: progressStyle\n      })), React.createElement('div', {\n        className: 'control-container'\n      }, React.createElement('div', {\n        className: 'mode-control'\n      }, React.createElement('i', {\n        className: 'icon fa fa-' + playModeClass,\n        style: btnStyle,\n        onClick: this.handleChangePlayMode.bind(this)\n      })), React.createElement('div', {\n        className: 'controls'\n      }, React.createElement('i', {\n        className: 'icon fa fa-step-backward',\n        style: btnStyle,\n        onClick: this.handlePrev.bind(this)\n      }), React.createElement('i', {\n        className: 'icon fa fa-' + (this.state.play ? 'pause' : 'play'),\n        style: btnStyle,\n        onClick: this.handleToggle.bind(this)\n      }), React.createElement('i', {\n        className: 'icon fa fa-step-forward',\n        style: btnStyle,\n        onClick: this.handleNext.bind(this)\n      })))), React.createElement('div', {\n        className: 'cover-container'\n      }, React.createElement('div', {\n        className: 'cover',\n        style: {\n          backgroundImage: 'url(' + activeMusic.cover + ')'\n        }\n      })));\n    }\n  }]);\n\n  return MusicPlayer;\n}(Component);\n\nMusicPlayer.propTypes = {\n  autoplay: PropTypes.bool,\n  progressColor: PropTypes.string,\n  btnColor: PropTypes.string,\n  playlist: PropTypes.array.isRequired,\n  style: PropTypes.object\n};\nMusicPlayer.defaultProps = {\n  autoplay: false,\n  progressColor: '#66cccc',\n  btnColor: '#4a4a4a',\n  playlist: [],\n  style: {}\n};\nexport default MusicPlayer;","map":null,"metadata":{},"sourceType":"module"}