{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _calculateTextareaHeight = require('../utils/calculate-textarea-height');\n\nvar _calculateTextareaHeight2 = _interopRequireDefault(_calculateTextareaHeight);\n\nvar _injectStyle = require('../utils/inject-style');\n\nvar _unionClassNames = require('../utils/union-class-names');\n\nvar _unionClassNames2 = _interopRequireDefault(_unionClassNames);\n\nvar _helpers = require('../utils/helpers');\n\nvar _textInput = require('../style/text-input');\n\nvar _textInput2 = _interopRequireDefault(_textInput);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar newLineRegex = /[\\r\\n]/g;\nvar textInputPropTypes = {\n  className: _propTypes2.default.string,\n  minHeight: _propTypes2.default.number,\n  maxHeight: _propTypes2.default.number,\n  minRows: _propTypes2.default.number,\n  maxRows: _propTypes2.default.number,\n  style: _propTypes2.default.object,\n  hoverStyle: _propTypes2.default.object,\n  focusStyle: _propTypes2.default.object,\n  allowNewLine: _propTypes2.default.bool,\n  disabled: _propTypes2.default.bool,\n  disabledStyle: _propTypes2.default.object,\n  disabledHoverStyle: _propTypes2.default.object,\n  onUpdate: _propTypes2.default.func,\n  onKeyDown: _propTypes2.default.func,\n  value: _propTypes2.default.string,\n  defaultValue: _propTypes2.default.string,\n  valueLink: _propTypes2.default.shape({\n    value: _propTypes2.default.string.isRequired,\n    requestChange: _propTypes2.default.func.isRequired\n  })\n};\n/**\n * Returns an object with properties that are relevant for the TextInput's textarea.\n *\n * As the height of the textarea needs to be calculated valueLink can not be\n * passed down to the textarea, but made available through this component.\n */\n\nfunction sanitizeChildProps(properties) {\n  var childProps = (0, _helpers.omit)(properties, Object.keys(textInputPropTypes));\n\n  if (_typeof(properties.valueLink) === 'object') {\n    childProps.value = properties.valueLink.value;\n  }\n\n  return childProps;\n}\n/**\n * Update hover & focus style for the speficied styleId.\n *\n * @param styleId {string} - a unique id that exists as class attribute in the DOM\n * @param properties {object} - the components properties optionally containing hoverStyle & focusStyle\n */\n\n\nfunction updatePseudoClassStyle(styleId, properties) {\n  var hoverStyle = _extends({}, _textInput2.default.hoverStyle, properties.hoverStyle);\n\n  var focusStyle = _extends({}, _textInput2.default.focusStyle, properties.focusStyle);\n\n  var disabledHoverStyle = _extends({}, _textInput2.default.disabledHoverStyle, properties.disabledHoverStyle);\n\n  var styles = [{\n    id: styleId,\n    style: hoverStyle,\n    pseudoClass: 'hover'\n  }, {\n    id: styleId,\n    style: focusStyle,\n    pseudoClass: 'focus'\n  }, {\n    id: styleId,\n    style: disabledHoverStyle,\n    pseudoClass: 'hover',\n    disabled: true\n  }];\n  (0, _injectStyle.injectStyles)(styles);\n}\n/**\n * TextInput component with great UX like autogrowing & handling states\n *\n * Note on styling: Right now this component doen't allow to change style after\n * initialisation.\n *\n * Note on resizing:\n * If you fill a textarea only with spaces and the cursor reaches the right end\n * it won't break the line. This leads to unexpected behaviour for the automatic\n * resizing.\n *\n * This component was highly inspired by the great work from these guys\n * - Andrey Popp: https://github.com/andreypopp/react-textarea-autosize\n * - Eugene: https://gist.github.com/eugene1g/5dbaa7d35d0c7d5c2c56\n */\n\n\nvar TextInput = function (_Component) {\n  _inherits(TextInput, _Component);\n\n  function TextInput(properties) {\n    _classCallCheck(this, TextInput);\n\n    var _this = _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call(this, properties));\n\n    _this._onKeyDown = function (event) {\n      if (!_this.props.allowNewLine && event.key === 'Enter') {\n        event.preventDefault();\n      }\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(event);\n      }\n    };\n\n    _this._onChange = function (event) {\n      var value = event.target.value;\n\n      if (!_this.props.allowNewLine && value.match(newLineRegex) !== null) {\n        value = value.replace(newLineRegex, ' ');\n      }\n\n      if ((0, _helpers.has)(_this.props, 'valueLink')) {\n        _this.props.valueLink.requestChange(value);\n      } else if ((0, _helpers.has)(_this.props, 'defaultValue')) {\n        _this.setState({\n          inputValue: value\n        });\n      }\n\n      if (_this.props.onUpdate) {\n        _this.props.onUpdate({\n          value: value\n        });\n      }\n\n      _this._triggerResize(value);\n    };\n\n    var inputValue = void 0;\n\n    if ((0, _helpers.has)(properties, 'valueLink')) {\n      inputValue = properties.valueLink.value;\n    } else if ((0, _helpers.has)(properties, 'value')) {\n      inputValue = properties.value;\n    } else if ((0, _helpers.has)(properties, 'defaultValue')) {\n      inputValue = properties.defaultValue;\n    }\n\n    _this.state = {\n      height: 'auto',\n      inputValue: inputValue\n    };\n    _this.textareaProps = sanitizeChildProps(properties);\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: 'componentWillMount',\n\n    /**\n     * Generates the style-id & inject the focus & hover style.\n     */\n    value: function componentWillMount() {\n      var id = (0, _helpers.uniqueId)();\n      this._styleId = 'style-id' + id;\n      updatePseudoClassStyle(this._styleId, this.props);\n    }\n    /**\n     * Right after the component go injected into the DOM it should be resized.\n     */\n\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._triggerResize(this.state.inputValue);\n    }\n    /**\n     * Update the properties passed to the textarea and resize as with the new\n     * properties the height might have changed.\n     */\n\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(properties) {\n      var _this2 = this; // Makes sure we have inputValue available when triggering a resize.\n\n\n      var newState = {\n        inputValue: this.state.inputValue\n      };\n\n      if ((0, _helpers.has)(properties, 'valueLink')) {\n        newState.inputValue = properties.valueLink.value;\n      } else if ((0, _helpers.has)(properties, 'value')) {\n        newState.inputValue = properties.value;\n      }\n\n      this.textareaProps = sanitizeChildProps(properties);\n      (0, _injectStyle.removeStyle)(this._styleId);\n      updatePseudoClassStyle(this._styleId, properties);\n      this.setState(newState, function () {\n        return _this2._triggerResize(newState.inputValue);\n      });\n    }\n    /**\n     * Remove a component's associated styles whenever it gets removed from the DOM.\n     */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      (0, _injectStyle.removeStyle)(this._styleId);\n    }\n    /**\n     * Prevent any newline (except allowNewLine is active) and pass the event to\n     * the onKeyDown property.\n     *\n     * This is an optimization to avoid adding a newline char & removing it right\n     * away in the onUpdate callback.\n     */\n\n    /**\n     * Update the height and calls the provided change callback for onUpdate\n     * or valueLink.\n     *\n     * In addition newline characters are replaced by spaces in the textarea value\n     * in case allowNewLine is set to false and newLine characters could be found.\n     */\n\n  }, {\n    key: '_triggerResize',\n\n    /**\n     * Calculate the height and store the new height in the state to trigger a render.\n     */\n    value: function _triggerResize(textareaValue) {\n      var height = (0, _calculateTextareaHeight2.default)(_reactDom2.default.findDOMNode(this), textareaValue, this.props.minRows, this.props.maxRows, this.props.minHeight, this.props.maxHeight);\n      this.setState({\n        height: height\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var textareaStyle = _extends({}, _textInput2.default.style, this.props.style);\n\n      if (this.props.disabled) {\n        textareaStyle = _extends({}, textareaStyle, _textInput2.default.disabledStyle, this.props.disabledStyle);\n      }\n\n      textareaStyle.height = this.state.height;\n      return _react2.default.createElement('textarea', _extends({\n        style: textareaStyle,\n        value: this.state.inputValue,\n        className: (0, _unionClassNames2.default)(this.props.className, this._styleId),\n        onChange: this._onChange,\n        onKeyDown: this._onKeyDown,\n        disabled: this.props.disabled\n      }, this.textareaProps));\n    }\n  }]);\n\n  return TextInput;\n}(_react.Component);\n\nTextInput.displayName = 'TextInput';\nTextInput.propTypes = textInputPropTypes;\nTextInput.defaultProps = {\n  allowNewLine: false,\n  disabled: false\n};\nexports.default = TextInput;","map":null,"metadata":{},"sourceType":"script"}