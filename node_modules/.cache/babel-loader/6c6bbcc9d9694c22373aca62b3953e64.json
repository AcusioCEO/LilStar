{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.today = exports.convertDateToDateKey = exports.getDateForDateKey = exports.getDateKey = exports.getLocaleData = exports.getLastDayForMonth = exports.getWeekArrayForMonth = undefined;\n\nvar _i18n = require('../config/i18n');\n\nvar _i18n2 = _interopRequireDefault(_i18n);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * The function will take a month and year value and will return an array of weeks for that month.\n * Each element in this array will be in-turn an array of days in the week.\n * @param {number} month: the month for which array of weeks is needed\n * @param {number} year: the year for which array of weeks is needed\n * @param {number} firstDayOfWeek: first day of the week in the locale\n * @returns {Array}: Array of weeks in a month, each week is in turn array of days in that week\n */\n\n\nvar getWeekArrayForMonth = exports.getWeekArrayForMonth = function getWeekArrayForMonth(month, year, firstDayOfWeek) {\n  var monthDay = new Date(year, month, 1); // Todo: simplify this calculation of first date\n\n  var firstDate = 1 + firstDayOfWeek - monthDay.getDay();\n  firstDate = firstDate <= 1 ? firstDate : firstDate - 7;\n  monthDay.setDate(firstDate);\n  var lastDate = new Date(year, month + 1, 0);\n  var weekArray = [];\n\n  while (monthDay <= lastDate) {\n    var newWeek = [];\n\n    for (var dayCounter = 0; dayCounter < 7; dayCounter++) {\n      var weekDate = new Date(monthDay.getFullYear(), monthDay.getMonth(), monthDay.getDate());\n      newWeek.push(weekDate);\n      monthDay.setDate(monthDay.getDate() + 1);\n    }\n\n    weekArray.push(newWeek);\n  }\n\n  return weekArray;\n};\n\nvar getLastDayForMonth = exports.getLastDayForMonth = function getLastDayForMonth(year, month) {\n  return new Date(year, month + 1, 0);\n};\n/**\n * Function will return locale data for locale. If data is not available in config files it will return default data.\n * @param locale - locale for which data is needed.\n * @returns {Object}: Object containing locale data.\n */\n\n\nvar getLocaleData = exports.getLocaleData = function getLocaleData(locale) {\n  var localeResult = {};\n  var lData = void 0;\n\n  if (locale) {\n    lData = _i18n2.default.localeData[locale];\n  }\n\n  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  localeResult.monthNames = lData && lData.monthNames ? lData.monthNames : monthNames;\n  localeResult.dayNamesMin = lData && lData.dayNamesMin ? lData.dayNamesMin : ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n  localeResult.firstDay = lData && lData.firstDay ? lData.firstDay : 0;\n  localeResult.weekEnd = lData && lData.weekEnd ? lData.weekEnd : 0;\n  localeResult.isRTL = lData && lData.isRTL ? lData.isRTL : false;\n  return localeResult;\n};\n/**\n * Returns the string representation for a provided year, month & day.\n *\n * @param year {number} - any year\n * @param month {number} - can be between 1 and 12\n * @param day {number} - can be between 1 and 31 depending on the month\n * @returns {string}: a string representing the date in the format yyyy-mm-dd\n */\n\n\nvar getDateKey = exports.getDateKey = function getDateKey(year, month, day) {\n  return year + '-' + month + '-' + day;\n};\n/**\n * Returns the date for a date string representation.\n *\n * @param year {number} - any year\n * @param month {number} - can be between 1 and 12\n * @param day {number} - can be between 1 and 31 depending on the month\n * @returns {date} - the parse date\n */\n\n\nvar getDateForDateKey = exports.getDateForDateKey = function getDateForDateKey(dateKey) {\n  var splittedDate = dateKey.split('-');\n  return new Date(parseInt(splittedDate[0], 10), parseInt(splittedDate[1], 10) - 1, parseInt(splittedDate[2], 10));\n};\n/**\n * Returns the string representation for a provided date.\n *\n * @param date {date} - a valid date\n * @returns {string}: a string representing the date in the format yyyy-mm-dd\n */\n\n\nvar convertDateToDateKey = exports.convertDateToDateKey = function convertDateToDateKey(date) {\n  return getDateKey(date.getFullYear(), date.getMonth() + 1, date.getDate());\n};\n/**\n * Returns the date of today\n *\n * @returns {date}: today's date\n */\n\n\nvar today = exports.today = function today() {\n  return new Date();\n};","map":null,"metadata":{},"sourceType":"script"}