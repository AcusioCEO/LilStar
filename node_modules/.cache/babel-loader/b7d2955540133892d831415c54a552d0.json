{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _exenv = require('exenv');\n\nvar _helpers = require('../utils/helpers');\n\nvar _rating = require('../style/rating.js');\n\nvar _rating2 = _interopRequireDefault(_rating);\n\nvar _injectStyle = require('../utils/inject-style');\n\nvar _unionClassNames = require('../utils/union-class-names');\n\nvar _unionClassNames2 = _interopRequireDefault(_unionClassNames);\n\nvar _rating3 = require('../config/rating');\n\nvar _rating4 = _interopRequireDefault(_rating3);\n\nvar _animationFrameManagement = require('../utils/animation-frame-management');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ratingPropTypes = {\n  defaultValue: _propTypes2.default.oneOf([1, 2, 3, 4, 5]),\n  value: _propTypes2.default.oneOf([1, 2, 3, 4, 5]),\n  valueLink: _propTypes2.default.shape({\n    value: _propTypes2.default.oneOf([1, 2, 3, 4, 5]),\n    requestChange: _propTypes2.default.func.isRequired\n  }),\n  disabled: _propTypes2.default.bool,\n  tabIndex: _propTypes2.default.number,\n  character: _propTypes2.default.string,\n  characterProps: _propTypes2.default.object,\n  preventFocusStyleForTouchAndClick: _propTypes2.default.bool,\n  'aria-label': _propTypes2.default.string,\n  style: _propTypes2.default.object,\n  className: _propTypes2.default.string,\n  focusStyle: _propTypes2.default.object,\n  disabledStyle: _propTypes2.default.object,\n  hoverStyle: _propTypes2.default.object,\n  disabledHoverStyle: _propTypes2.default.object,\n  characterStyle: _propTypes2.default.object,\n  activeCharacterStyle: _propTypes2.default.object,\n  hoverCharacterStyle: _propTypes2.default.object,\n  onUpdate: _propTypes2.default.func,\n  onMouseDown: _propTypes2.default.func,\n  onMouseUp: _propTypes2.default.func,\n  onMouseEnter: _propTypes2.default.func,\n  onMouseMove: _propTypes2.default.func,\n  onMouseLeave: _propTypes2.default.func,\n  onTouchStart: _propTypes2.default.func,\n  onTouchMove: _propTypes2.default.func,\n  onTouchEnd: _propTypes2.default.func,\n  onTouchCancel: _propTypes2.default.func,\n  onFocus: _propTypes2.default.func,\n  onBlur: _propTypes2.default.func,\n  onKeyDown: _propTypes2.default.func\n};\n/**\n * sanitize properties for the wrapping div.\n */\n\nfunction sanitizeWrapperProps(properties) {\n  return (0, _helpers.omit)(properties, Object.keys(ratingPropTypes));\n}\n/**\n * sanitize properties for the character span.\n */\n\n\nfunction sanitizeCharacterProps(properties) {\n  return (0, _helpers.omit)(properties, ['data-belle-value', 'style']);\n}\n/**\n * Injects pseudo classes for styles into the DOM.\n */\n\n\nfunction updatePseudoClassStyle(ratingWrapperStyleId, properties, preventFocusStyleForTouchAndClick) {\n  var ratingFocusStyle = void 0;\n\n  if (preventFocusStyleForTouchAndClick) {\n    ratingFocusStyle = {\n      outline: 0\n    };\n  } else {\n    ratingFocusStyle = _extends({}, _rating2.default.focusStyle, properties.focusStyle);\n  }\n\n  var styles = [{\n    id: ratingWrapperStyleId,\n    style: ratingFocusStyle,\n    pseudoClass: 'focus'\n  }];\n  (0, _injectStyle.injectStyles)(styles);\n}\n/**\n * Rating component\n *\n * The component leverages 5 characters (by default stars) to allow the user to\n * to rate.\n */\n\n\nvar Rating = function (_Component) {\n  _inherits(Rating, _Component);\n\n  function Rating(properties) {\n    _classCallCheck(this, Rating);\n\n    var _this = _possibleConstructorReturn(this, (Rating.__proto__ || Object.getPrototypeOf(Rating)).call(this, properties));\n\n    _initialiseProps.call(_this);\n\n    var value = void 0;\n\n    if ((0, _helpers.has)(properties, 'valueLink')) {\n      value = properties.valueLink.value;\n    } else if ((0, _helpers.has)(properties, 'value')) {\n      value = properties.value;\n    } else if ((0, _helpers.has)(properties, 'defaultValue')) {\n      value = properties.defaultValue;\n    }\n\n    _this.state = {\n      value: value,\n      focusedValue: undefined,\n      generalProps: sanitizeWrapperProps(properties),\n      characterProps: sanitizeCharacterProps(properties.characterProps),\n      isFocus: false,\n      isActive: false\n    };\n    _this.preventFocusStyleForTouchAndClick = (0, _helpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _rating4.default.preventFocusStyleForTouchAndClick;\n    return _this;\n  }\n  /**\n   * Setting default prop values.\n   */\n\n\n  _createClass(Rating, [{\n    key: 'componentWillMount',\n\n    /**\n     * Apply pseudo class styling to the wrapper div.\n     */\n    value: function componentWillMount() {\n      var id = (0, _helpers.uniqueId)();\n      this.ratingWrapperStyleId = 'rating-wrapper-style-id' + id;\n      updatePseudoClassStyle(this.ratingWrapperStyleId, this.props, this.preventFocusStyleForTouchAndClick);\n\n      if (_exenv.canUseDOM) {\n        this.mouseUpOnDocumentCallback = this._onMouseUpOnDocument;\n        document.addEventListener('mouseup', this.mouseUpOnDocumentCallback);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(properties) {\n      var newState = {\n        wrapperProps: sanitizeWrapperProps(properties),\n        characterProps: sanitizeCharacterProps(properties.characterProps)\n      };\n\n      if (properties.valueLink) {\n        newState.value = properties.valueLink.value;\n      } else if (properties.value) {\n        newState.value = properties.value;\n      }\n\n      this.setState(newState);\n      this.preventFocusStyleForTouchAndClick = (0, _helpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _rating4.default.preventFocusStyleForTouchAndClick;\n      (0, _injectStyle.removeStyle)(this.ratingWrapperStyleId);\n      updatePseudoClassStyle(this.ratingWrapperStyleId, properties, this.preventFocusStyleForTouchAndClick);\n    }\n    /**\n     * Removes pseudo classes from the DOM once component gets removed.\n     */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      (0, _injectStyle.removeStyle)(this.ratingWrapperStyleId);\n\n      if (_exenv.canUseDOM) {\n        document.removeEventListener('mouseup', this.mouseUpOnDocumentCallback);\n      }\n    }\n    /**\n     * As soon as the mouse enters the component the focusedValue is updated based\n     * on the value of the targeted span.\n     */\n\n    /**\n     * As the mouse moved over the component and enters a new star the focusedValue\n     * is updated based on the value of the targeted span.\n     */\n\n    /**\n     * Resets the component as the mouse leaves the hover area.\n     */\n\n    /**\n     * Sets isActive state to true.\n     */\n\n    /**\n     * Sets isActive state to false.\n     */\n\n    /**\n     * Change focusValue and sets isActive state to true.\n     */\n\n    /**\n     * set the focusedValue depending on mouse position\n     */\n\n    /**\n     * update the component when touch ends\n     */\n\n    /**\n     * reset the component in case of touch cancel\n     */\n\n    /**\n     * reset the component on blur\n     */\n\n    /**\n     * enable focus styling of component when tab is used to focus component\n     */\n\n    /**\n     * Manages the keyboard events.\n     *\n     * In case the Rating Component is in focus Space, ArrowUp will result in increasing the value and arrow down will result in decreasing the value.\n     * Enter/ space will result in updating the value of the component.\n     *\n     * Pressing Escape will reset the value to last value.\n     *\n     */\n\n    /**\n     * decrease the value by 1 when arrow down key is pressed\n     */\n\n    /**\n     * increase value by 1 when arrow up key is pressed\n     */\n\n    /**\n     * set component value to current focus value\n     */\n\n    /**\n     * reset component when escape key is pressed\n     * esc key should just reset the component displayed rating without removing hover or focus styles\n     */\n\n  }, {\n    key: '_getCurrentValue',\n\n    /**\n     * Returns current value of rating to be displayed on the component\n     */\n    value: function _getCurrentValue() {\n      var value = void 0;\n\n      if (this.state.focusedValue !== undefined) {\n        value = this.state.focusedValue;\n      } else {\n        value = this.state.value ? this.state.value : 0;\n      }\n\n      return value;\n    }\n    /**\n     * The function will be passed to requestAnimationFrame for touchMove\n     */\n\n  }, {\n    key: '_triggerComponentUpdateOnTouchMove',\n    value: function _triggerComponentUpdateOnTouchMove(touches) {\n      var touchedElement = document.elementFromPoint(touches.clientX, touches.clientY);\n      var value = Number(touchedElement.getAttribute('data-belle-value'));\n\n      if (value && this.state.focusedValue !== value) {\n        this.setState({\n          focusedValue: value\n        });\n      }\n    }\n    /**\n     * update component when component is clicked, touch ends, enter or space key are hit\n     * different update logic will apply depending on whether component has property defaultValue, value or valueLink specified\n     */\n\n  }, {\n    key: '_triggerComponentUpdate',\n    value: function _triggerComponentUpdate(value) {\n      if ((0, _helpers.has)(this.props, 'valueLink')) {\n        this.props.valueLink.requestChange(value);\n        this.setState({\n          focusedValue: undefined,\n          isActive: false\n        });\n      } else if ((0, _helpers.has)(this.props, 'value')) {\n        this.setState({\n          focusedValue: undefined,\n          isActive: false\n        });\n      } else {\n        this.setState({\n          focusedValue: undefined,\n          isActive: false,\n          value: value\n        });\n      }\n\n      if (this.props.onUpdate) {\n        this.props.onUpdate({\n          value: value\n        });\n      }\n    }\n    /**\n     * Returns the HTML function to be rendered by this component.\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var currentValue = this._getCurrentValue();\n\n      var tabIndex = !this.props.disabled ? this.props.tabIndex : -1;\n\n      var characterStyle = _extends({}, _rating2.default.characterStyle, this.props.characterStyle);\n\n      if (this.state.isActive) {\n        characterStyle = _extends({}, characterStyle, _rating2.default.activeCharacterStyle, this.props.activeCharacterStyle);\n      } else if (this.state.isHover) {\n        characterStyle = _extends({}, characterStyle, _rating2.default.hoverCharacterStyle, this.props.hoverCharacterStyle);\n      }\n\n      var wrapperStyle = _extends({}, _rating2.default.style, this.props.style);\n\n      if (this.props.disabled) {\n        wrapperStyle = _extends({}, wrapperStyle, _rating2.default.disabledStyle, this.props.disabledStyle);\n\n        if (this.state.isHover) {\n          wrapperStyle = _extends({}, wrapperStyle, _rating2.default.disabledHoverStyle, this.props.disabledHoverStyle);\n        }\n      } else {\n        if (this.state.isFocus && this.preventFocusStyleForTouchAndClick) {\n          wrapperStyle = _extends({}, wrapperStyle, _rating2.default.focusStyle, this.props.focusStyle);\n        }\n\n        if (this.state.isHover) {\n          wrapperStyle = _extends({}, wrapperStyle, _rating2.default.hoverStyle, this.props.hoverStyle);\n        }\n      }\n\n      return _react2.default.createElement('div', _extends({\n        ref: 'wrapper',\n        style: wrapperStyle,\n        className: (0, _unionClassNames2.default)(this.props.className, this.ratingWrapperStyleId),\n        onKeyDown: this._onKeyDown,\n        onMouseEnter: this._onMouseEnter,\n        onMouseMove: this._onMouseMove,\n        onMouseLeave: this._onMouseLeave,\n        onMouseUp: this._onMouseUp,\n        onMouseDown: this._onMouseDown,\n        onTouchStart: this._onTouchStart,\n        onTouchMove: this._onTouchMove,\n        onTouchEnd: this._onTouchEnd,\n        onTouchCancel: this._onTouchCancel,\n        onContextMenu: this._onContextMenu,\n        onBlur: this._onBlur,\n        onFocus: this._onFocus,\n        tabIndex: tabIndex,\n        'aria-label': this.props['aria-label'],\n        'aria-valuemax': 5,\n        'aria-valuemin': 1,\n        'aria-valuenow': this.state.value,\n        'aria-disabled': this.props.disabled\n      }, this.state.wrapperProps), _react2.default.Children.map([1, 2, 3, 4, 5], function (value) {\n        var ratingStyle = currentValue >= value ? characterStyle : {};\n        return _react2.default.createElement('span', _extends({\n          'data-belle-value': value,\n          style: ratingStyle\n        }, _this2.state.characterProps), _this2.props.character);\n      }));\n    }\n  }]);\n\n  return Rating;\n}(_react.Component);\n\nRating.displayName = 'Rating';\nRating.propTypes = ratingPropTypes;\nRating.defaultProps = {\n  disabled: false,\n  tabIndex: 0,\n  character: '★',\n  'aria-label': 'rating'\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this._onMouseEnter = function (event) {\n    // In case the user pressed the mouse and then hovers over the rating and\n    // releases the mousUp should no be trigger. Only when the mouseDown starts\n    // inside.\n    // Activating inside, going out & coming back should still be possible.\n    if (!_this3.state.isActive) {\n      _this3.preventNextMouseUpTriggerUpdate = true;\n    }\n\n    if (!_this3.props.disabled) {\n      var value = Number(event.target.getAttribute('data-belle-value'));\n\n      _this3.setState({\n        focusedValue: value,\n        isHover: true\n      });\n    } else {\n      _this3.setState({\n        isHover: true\n      });\n    }\n\n    if (_this3.props.onMouseEnter) {\n      _this3.props.onMouseEnter(event);\n    }\n  };\n\n  this._onMouseMove = function (event) {\n    if (!_this3.props.disabled) {\n      var value = Number(event.target.getAttribute('data-belle-value'));\n\n      if (_this3.state.focusedValue !== value) {\n        _this3.setState({\n          focusedValue: value\n        });\n      }\n    }\n\n    if (_this3.props.onMouseMove) {\n      _this3.props.onMouseMove(event);\n    }\n  };\n\n  this._onMouseLeave = function (event) {\n    if (!_this3.props.disabled) {\n      _this3.setState({\n        focusedValue: undefined,\n        isHover: false\n      });\n    } else {\n      _this3.setState({\n        isHover: false\n      });\n    }\n\n    if (_this3.props.onMouseLeave) {\n      _this3.props.onMouseLeave(event);\n    }\n  };\n\n  this._onMouseDown = function (event) {\n    if (!_this3.props.disabled && event.button === 0) {\n      _this3.setState({\n        isActive: true\n      });\n\n      _this3.preventNextMouseUpTriggerUpdate = false;\n    }\n\n    if (_this3.props.onMouseDown) {\n      _this3.props.onMouseDown(event);\n    }\n  };\n\n  this._onMouseUp = function (event) {\n    if (!_this3.props.disabled && !_this3.preventNextMouseUpTriggerUpdate) {\n      var value = Number(event.target.getAttribute('data-belle-value'));\n\n      _this3._triggerComponentUpdate(value);\n    }\n\n    if (_this3.props.onMouseUp) {\n      _this3.props.onMouseUp(event);\n    }\n  };\n\n  this._onMouseUpOnDocument = function () {\n    _this3.setState({\n      isActive: false\n    });\n  };\n\n  this._onContextMenu = function () {\n    _this3.setState({\n      isActive: false\n    });\n  };\n\n  this._onTouchStart = function (event) {\n    event.preventDefault();\n\n    if (!_this3.props.disabled && event.touches.length === 1) {\n      var value = Number(event.target.getAttribute('data-belle-value'));\n\n      _this3.setState({\n        focusedValue: value,\n        isActive: true\n      });\n    }\n\n    if (_this3.props.onTouchStart) {\n      _this3.props.onTouchStart(event);\n    }\n  };\n\n  this._onTouchMove = function (event) {\n    if (!_this3.props.disabled && event.touches.length === 1) {\n      var touches = event.touches[0]; // the requestAnimationFrame function must be executed in the context of window\n      // see http://stackoverflow.com/a/9678166/837709\n\n      var animationFrame = _animationFrameManagement.requestAnimationFrame.call(window, _this3._triggerComponentUpdateOnTouchMove.bind(_this3, touches));\n\n      if (_this3.previousTouchMoveFrame) {\n        // the cancelAnimationFrame function must be executed in the context of window\n        // see http://stackoverflow.com/a/9678166/837709\n        _animationFrameManagement.cancelAnimationFrame.call(window, _this3.previousTouchMoveFrame);\n      }\n\n      _this3.previousTouchMoveFrame = animationFrame;\n    }\n\n    if (_this3.props.onTouchMove) {\n      _this3.props.onTouchMove(event);\n    }\n  };\n\n  this._onTouchEnd = function (event) {\n    if (!_this3.props.disabled) {\n      event.preventDefault();\n\n      _this3.setState({\n        isActive: false\n      });\n\n      var value = _this3.state.focusedValue;\n\n      _this3._triggerComponentUpdate(value);\n    }\n\n    if (_this3.props.onTouchEnd) {\n      _this3.props.onTouchEnd(event);\n    }\n  };\n\n  this._onTouchCancel = function (event) {\n    if (!_this3.props.disabled) {\n      _this3.setState({\n        isActive: false,\n        focusedValue: undefined\n      });\n    }\n\n    if (_this3.props.onTouchCancel) {\n      _this3.props.onTouchCancel(event);\n    }\n  };\n\n  this._onBlur = function (event) {\n    if (!_this3.props.disabled) {\n      _this3.setState({\n        focusedValue: undefined,\n        isFocus: false,\n        isActive: false\n      });\n    }\n\n    if (_this3.props.onBlur) {\n      _this3.props.onBlur(event);\n    }\n  };\n\n  this._onFocus = function () {\n    if (!_this3.state.isActive && !_this3.props.disabled) {\n      _this3.setState({\n        isFocus: true\n      });\n    }\n\n    if (_this3.props.onFocus) {\n      _this3.props.onFocus(event);\n    }\n  };\n\n  this._onKeyDown = function (event) {\n    if (!_this3.props.disabled) {\n      if (event.key === 'ArrowDown' || event.key === 'ArrowLeft') {\n        event.preventDefault();\n\n        _this3._onArrowDownKeyDown();\n      } else if (event.key === 'ArrowUp' || event.key === 'ArrowRight') {\n        event.preventDefault();\n\n        _this3._onArrowUpKeyDown();\n      } else if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault();\n\n        _this3._onEnterSpaceKeyDown();\n      } else if (event.key === 'Escape') {\n        event.preventDefault();\n\n        _this3._onEscapeKeyDown();\n      }\n    }\n\n    if (_this3.props.onKeyDown) {\n      _this3.props.onKeyDown(event);\n    }\n  };\n\n  this._onArrowDownKeyDown = function () {\n    var newValue = _this3.state.focusedValue !== undefined ? _this3.state.focusedValue : _this3.state.value;\n    newValue = newValue > 0 ? newValue - 1 : 0;\n\n    _this3.setState({\n      focusedValue: newValue\n    });\n  };\n\n  this._onArrowUpKeyDown = function () {\n    var newValue = _this3.state.focusedValue !== undefined ? _this3.state.focusedValue : _this3.state.value;\n\n    if (!newValue) {\n      newValue = 1;\n    } else if (newValue < 5) {\n      newValue = newValue + 1;\n    } else {\n      newValue = 5;\n    }\n\n    _this3.setState({\n      focusedValue: newValue\n    });\n  };\n\n  this._onEnterSpaceKeyDown = function () {\n    var newValue = void 0;\n\n    if (_this3.state.focusedValue !== undefined) {\n      if (_this3.state.focusedValue === 0) {\n        newValue = undefined;\n      } else {\n        newValue = _this3.state.focusedValue;\n      }\n\n      _this3._triggerComponentUpdate(newValue);\n    }\n  };\n\n  this._onEscapeKeyDown = function () {\n    _this3.setState({\n      focusedValue: undefined\n    });\n  };\n};\n\nexports.default = Rating;","map":null,"metadata":{},"sourceType":"script"}