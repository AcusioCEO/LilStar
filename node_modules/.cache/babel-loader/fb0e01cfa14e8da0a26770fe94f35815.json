{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _isComponentOfType = require('../utils/is-component-of-type.js');\n\nvar _isComponentOfType2 = _interopRequireDefault(_isComponentOfType);\n\nvar _helpers = require('../utils/helpers');\n\nvar _Option = require('../components/Option');\n\nvar _Option2 = _interopRequireDefault(_Option);\n\nvar _Separator = require('../components/Separator');\n\nvar _Separator2 = _interopRequireDefault(_Separator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Returns the index of the entry with a certain value from the component's\n * children.\n *\n * The index search includes separator & option components.\n */\n\n\nvar findIndexOfSelectedOption = function findIndexOfSelectedOption(component) {\n  var filterFunction = function filterFunction(child) {\n    return (0, _isComponentOfType2.default)(_Option2.default, child) || (0, _isComponentOfType2.default)(_Separator2.default, child);\n  };\n\n  return (0, _helpers.findIndex)((0, _helpers.filterReactChildren)(component.props.children, filterFunction), function (element) {\n    return element.props.value === component.state.selectedValue;\n  });\n};\n\nvar selectConfig = {\n  shouldPositionOptions: true,\n\n  /**\n   * Repositions to the menu to position the focusedOption right on top\n   * of the selected one.\n   *\n   * @param selectComponent {object} - the Select component itself accessible with `this`\n   */\n  positionOptions: function positionOptions(selectComponent) {\n    var menuNode = _reactDom2.default.findDOMNode(selectComponent.refs.menu);\n\n    var menuStyle = window.getComputedStyle(menuNode, null);\n    var menuWidth = parseFloat(menuStyle.getPropertyValue('width')); // In case of a placeholder no option is focused on initially\n\n    var optionIndex = void 0;\n\n    if (selectComponent.state.selectedValue) {\n      optionIndex = findIndexOfSelectedOption(selectComponent);\n    } else {\n      optionIndex = 0;\n    }\n\n    var option = menuNode.childNodes[optionIndex];\n    var menuHeight = parseFloat(menuStyle.getPropertyValue('height'));\n    var menuTopBorderWidth = parseFloat(menuStyle.getPropertyValue('border-top-width')); // In order to work with legacy browsers the second paramter for pseudoClass\n    // has to be provided http://caniuse.com/#feat=getcomputedstyle\n\n    var optionStyle = window.getComputedStyle(option.childNodes[0], null);\n    var optionPaddingTop = parseFloat(optionStyle.getPropertyValue('padding-top'));\n    var optionPaddingLeft = parseFloat(optionStyle.getPropertyValue('padding-top'));\n\n    var selectedOptionWrapperNode = _reactDom2.default.findDOMNode(selectComponent.refs.selectedOptionWrapper);\n\n    var selectedOptionWrapperStyle = window.getComputedStyle(selectedOptionWrapperNode, null);\n    var selectedOptionWrapperPaddingTop = parseFloat(selectedOptionWrapperStyle.getPropertyValue('padding-top'));\n    var newTop = option.offsetTop + optionPaddingTop - selectedOptionWrapperPaddingTop + menuTopBorderWidth;\n    var newLeft = option.offsetLeft + optionPaddingLeft; // Top positioning\n\n    if (menuHeight < menuNode.scrollHeight) {\n      if (newTop + menuHeight > menuNode.scrollHeight) {\n        // In case scrolling is not enough the box needs to be moved more to\n        // the top to match the same position.\n        var maxScrollTop = menuNode.scrollHeight - menuHeight;\n        menuNode.scrollTop = maxScrollTop;\n        menuNode.style.top = '-' + (newTop - maxScrollTop) + 'px';\n      } else {\n        // In case it's the first entry scrolling is not used to respect the\n        // menu's paddingTop.\n        if (optionIndex === 0) {\n          menuNode.scrollTop = 0;\n          menuNode.style.top = '-' + newTop + 'px';\n        } else {\n          menuNode.scrollTop = newTop;\n        }\n      }\n    } else {\n      menuNode.style.top = '-' + newTop + 'px';\n    } // Left positioning\n\n\n    menuNode.style.left = '-' + newLeft + 'px'; // Increasing the width\n    //\n    // Pro:\n    // - It gives a option in the menu the same width\n    // as in the selectedOptionWrapper.\n    // - There is space to keep the text of the option on the exact same pixel\n    // when opening. The menu is symetric in relation to the\n    // selectedOptionWrapper.\n    //\n    // Con:\n    // - Adding the padding could cause issue with design as it gets wider than\n    // the original field.\n\n    menuNode.style.width = menuWidth + newLeft * 2 + 'px';\n  }\n};\nexports.default = selectConfig;","map":null,"metadata":{},"sourceType":"script"}