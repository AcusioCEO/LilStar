{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _injectStyle = require('../utils/inject-style');\n\nvar _unionClassNames = require('../utils/union-class-names');\n\nvar _unionClassNames2 = _interopRequireDefault(_unionClassNames);\n\nvar _helpers = require('../utils/helpers');\n\nvar _dateHelpers = require('../utils/date-helpers');\n\nvar _datePicker = require('../style/date-picker');\n\nvar _datePicker2 = _interopRequireDefault(_datePicker);\n\nvar _datePicker3 = require('../config/datePicker');\n\nvar _datePicker4 = _interopRequireDefault(_datePicker3);\n\nvar _ActionArea = require('./ActionArea');\n\nvar _ActionArea2 = _interopRequireDefault(_ActionArea);\n\nvar _DisabledDay = require('./DisabledDay');\n\nvar _DisabledDay2 = _interopRequireDefault(_DisabledDay);\n\nvar _Day = require('./Day');\n\nvar _Day2 = _interopRequireDefault(_Day);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar datePickerPropTypes = {\n  // value related props\n  defaultValue: _propTypes2.default.instanceOf(Date),\n  value: _propTypes2.default.instanceOf(Date),\n  valueLink: _propTypes2.default.shape({\n    value: _propTypes2.default.instanceOf(Date),\n    requestChange: _propTypes2.default.func.isRequired\n  }),\n  min: _propTypes2.default.instanceOf(Date),\n  max: _propTypes2.default.instanceOf(Date),\n  // component config related props\n  locale: _propTypes2.default.string,\n  month: _propTypes2.default.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n  defaultMonth: _propTypes2.default.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n  year: _propTypes2.default.number,\n  defaultYear: _propTypes2.default.number,\n  showOtherMonthDate: _propTypes2.default.bool,\n  renderDay: _propTypes2.default.func,\n  tabIndex: _propTypes2.default.number,\n  'aria-label': _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  readOnly: _propTypes2.default.bool,\n  preventFocusStyleForTouchAndClick: _propTypes2.default.bool,\n  // event callbacks for wrapper\n  onFocus: _propTypes2.default.func,\n  onBlur: _propTypes2.default.func,\n  onKeyDown: _propTypes2.default.func,\n  onMouseDown: _propTypes2.default.func,\n  onMouseUp: _propTypes2.default.func,\n  onTouchStart: _propTypes2.default.func,\n  onTouchEnd: _propTypes2.default.func,\n  onTouchCancel: _propTypes2.default.func,\n  // callbacks for change of values\n  onUpdate: _propTypes2.default.func,\n  onMonthUpdate: _propTypes2.default.func,\n  // props\n  dayProps: _propTypes2.default.object,\n  navBarProps: _propTypes2.default.object,\n  prevMonthNavProps: _propTypes2.default.object,\n  prevMonthNavIconProps: _propTypes2.default.object,\n  nextMonthNavProps: _propTypes2.default.object,\n  nextMonthNavIconProps: _propTypes2.default.object,\n  monthLabelProps: _propTypes2.default.object,\n  dayLabelProps: _propTypes2.default.object,\n  weekHeaderProps: _propTypes2.default.object,\n  weekGridProps: _propTypes2.default.object,\n  // ClassNames\n  className: _propTypes2.default.string,\n  // wrapper styles\n  style: _propTypes2.default.object,\n  disabledStyle: _propTypes2.default.object,\n  readOnlyStyle: _propTypes2.default.object,\n  hoverStyle: _propTypes2.default.object,\n  activeStyle: _propTypes2.default.object,\n  focusStyle: _propTypes2.default.object,\n  disabledHoverStyle: _propTypes2.default.object,\n  // navbar styles\n  navBarStyle: _propTypes2.default.object,\n  // prevMonthNav styles\n  prevMonthNavStyle: _propTypes2.default.object,\n  prevMonthNavIconStyle: _propTypes2.default.object,\n  hoverPrevMonthNavStyle: _propTypes2.default.object,\n  activePrevMonthNavStyle: _propTypes2.default.object,\n  // nextMonthNav styles\n  nextMonthNavStyle: _propTypes2.default.object,\n  nextMonthNavIconStyle: _propTypes2.default.object,\n  hoverNextMonthNavStyle: _propTypes2.default.object,\n  activeNextMonthNavStyle: _propTypes2.default.object,\n  weekHeaderStyle: _propTypes2.default.object,\n  // monthlbl styles\n  monthLabelStyle: _propTypes2.default.object,\n  // daylbl styles\n  dayLabelStyle: _propTypes2.default.object,\n  disabledDayLabelStyle: _propTypes2.default.object,\n  weekendLabelStyle: _propTypes2.default.object,\n  // day styles\n  dayStyle: _propTypes2.default.object,\n  disabledDayStyle: _propTypes2.default.object,\n  readOnlyDayStyle: _propTypes2.default.object,\n  activeDayStyle: _propTypes2.default.object,\n  focusDayStyle: _propTypes2.default.object,\n  disabledFocusDayStyle: _propTypes2.default.object,\n  todayStyle: _propTypes2.default.object,\n  selectedDayStyle: _propTypes2.default.object,\n  otherMonthDayStyle: _propTypes2.default.object,\n  weekendStyle: _propTypes2.default.object\n};\n/**\n * Returns an object with properties that are relevant for the wrapping div of the date picker.\n */\n\nfunction sanitizeWrapperProps(properties) {\n  return (0, _helpers.omit)(properties, Object.keys(datePickerPropTypes));\n}\n/**\n * Returns an object with properties that are relevant for day span.\n */\n\n\nfunction sanitizeEmptyDayProps(properties) {\n  return (0, _helpers.omit)(properties, ['key', 'style']);\n}\n/**\n * Returns an object with properties that are relevant for day span.\n */\n\n\nfunction sanitizeDisabledDayProps(properties) {\n  return (0, _helpers.omit)(properties, ['key', 'onMouseEnter', 'onMouseLeave', 'style']);\n}\n/**\n * Returns an object with properties that are relevant for day span.\n */\n\n\nfunction sanitizeDayProps(properties) {\n  return (0, _helpers.omit)(properties, ['key', 'onMouseDown', 'onMouseUp', 'onMouseEnter', 'onMouseLeave', 'onTouchStart', 'onTouchEnd', 'onTouchCancel', 'aria-selected', 'style', 'role']);\n}\n\nfunction sanitizeNavBarProps(properties) {\n  return (0, _helpers.omit)(properties, ['style']);\n}\n\nfunction sanitizePrevMonthNavProps(properties) {\n  return (0, _helpers.omit)(properties, ['aria-label', 'className', 'onClick', 'style']);\n}\n\nfunction sanitizePrevMonthNavIconProps(properties) {\n  return (0, _helpers.omit)(properties, ['style']);\n}\n\nfunction sanitizeNextMonthNavProps(properties) {\n  return (0, _helpers.omit)(properties, ['aria-label', 'className', 'onClick', 'style']);\n}\n\nfunction sanitizeNextMonthNavIconProps(properties) {\n  return (0, _helpers.omit)(properties, ['style']);\n}\n\nfunction sanitizeMonthLabelProps(properties) {\n  return (0, _helpers.omit)(properties, ['id', 'role', 'style']);\n}\n\nfunction sanitizeDayLabelProps(properties) {\n  return (0, _helpers.omit)(properties, ['key', 'role', 'style']);\n}\n\nfunction sanitizeWeekHeaderProps(properties) {\n  return (0, _helpers.omit)(properties, ['style']);\n}\n\nfunction sanitizeWeekGridProps(properties) {\n  return (0, _helpers.omit)(properties, ['role', 'style']);\n}\n/**\n * Injects pseudo classes for styles into the DOM.\n */\n\n\nfunction updatePseudoClassStyle(pseudoStyleIds, properties, preventFocusStyleForTouchAndClick) {\n  var styles = [{\n    id: pseudoStyleIds.prevMonthNavStyleId,\n    style: _extends({}, _datePicker2.default.hoverPrevMonthNavStyle, properties.hoverPrevMonthNavStyle),\n    pseudoClass: 'hover'\n  }, {\n    id: pseudoStyleIds.nextMonthNavStyleId,\n    style: _extends({}, _datePicker2.default.hoverNextMonthNavStyle, properties.hoverNextMonthNavStyle),\n    pseudoClass: 'hover'\n  }];\n  var focusStyle = void 0;\n\n  if (preventFocusStyleForTouchAndClick) {\n    focusStyle = {\n      outline: 0\n    };\n  } else {\n    focusStyle = _extends({}, _datePicker2.default.focusStyle, properties.focusStyle);\n  }\n\n  styles.push({\n    id: pseudoStyleIds.styleId,\n    style: focusStyle,\n    pseudoClass: 'focus'\n  });\n  (0, _injectStyle.injectStyles)(styles);\n}\n/**\n * DatePicker React Component.\n *\n * This implementation follows the recommendations proposed here:\n * http://www.w3.org/TR/wai-aria-practices/#datepicker\n */\n\n\nvar DatePicker = function (_Component) {\n  _inherits(DatePicker, _Component);\n\n  function DatePicker(properties) {\n    _classCallCheck(this, DatePicker);\n\n    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, properties));\n\n    _initialiseProps.call(_this);\n\n    var selectedDate = void 0;\n    var month = void 0;\n    var year = void 0;\n\n    if ((0, _helpers.has)(properties, 'valueLink')) {\n      selectedDate = properties.valueLink.value;\n    } else if ((0, _helpers.has)(properties, 'value')) {\n      selectedDate = properties.value;\n    } else if ((0, _helpers.has)(properties, 'defaultValue')) {\n      selectedDate = properties.defaultValue;\n    }\n\n    if (properties.defaultMonth) {\n      month = properties.defaultMonth - 1;\n    } else if (selectedDate) {\n      month = selectedDate.getMonth();\n    } else {\n      month = (0, _dateHelpers.today)().getMonth();\n    }\n\n    if (properties.defaultYear) {\n      year = properties.defaultYear;\n    } else if (selectedDate) {\n      year = selectedDate.getFullYear();\n    } else {\n      year = (0, _dateHelpers.today)().getFullYear();\n    }\n\n    _this.state = {\n      isFocused: false,\n      isActive: false,\n      selectedDate: selectedDate,\n      month: month,\n      year: year\n    };\n    _this.localeData = (0, _dateHelpers.getLocaleData)(properties.locale);\n    _this.wrapperProps = sanitizeWrapperProps(properties);\n    _this.dayProps = sanitizeDayProps(properties.dayProps);\n    _this.disabledDayProps = sanitizeDisabledDayProps(properties.dayProps);\n    _this.emptyDayProps = sanitizeEmptyDayProps(properties.dayProps);\n    _this.navBarProps = sanitizeNavBarProps(properties.navBarProps);\n    _this.prevMonthNavProps = sanitizePrevMonthNavProps(properties.prevMonthNavProps);\n    _this.prevMonthNavIconProps = sanitizePrevMonthNavIconProps(properties.prevMonthNavIconProps);\n    _this.nextMonthNavProps = sanitizeNextMonthNavProps(properties.nextMonthNavProps);\n    _this.nextMonthNavIconProps = sanitizeNextMonthNavIconProps(properties.nextMonthNavIconProps);\n    _this.monthLabelProps = sanitizeMonthLabelProps(properties.monthLabelProps);\n    _this.dayLabelProps = sanitizeDayLabelProps(properties.dayLabelProps);\n    _this.weekHeaderProps = sanitizeWeekHeaderProps(properties.weekHeaderProps);\n    _this.weekGridProps = sanitizeWeekGridProps(properties.weekGridProps);\n    _this.preventFocusStyleForTouchAndClick = (0, _helpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _datePicker4.default.preventFocusStyleForTouchAndClick;\n    return _this;\n  }\n\n  _createClass(DatePicker, [{\n    key: 'componentWillMount',\n\n    /**\n     * Generates the style-id based on React's unique DOM node id.\n     * Calls function to inject the pseudo classes into the dom.\n     */\n    value: function componentWillMount() {\n      var id = (0, _helpers.uniqueId)();\n      this.pseudoStyleIds = {};\n      this.pseudoStyleIds.styleId = 'wrapper-style-id' + id;\n      this.pseudoStyleIds.prevMonthNavStyleId = 'prevMonthNav-style-id' + id;\n      this.pseudoStyleIds.nextMonthNavStyleId = 'nextMonthNav-style-id' + id;\n      updatePseudoClassStyle(this.pseudoStyleIds, this.props, this.preventFocusStyleForTouchAndClick);\n    }\n    /**\n     * Function will update component state and styles as new props are received.\n     */\n\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(properties) {\n      var newState = {};\n\n      if ((0, _helpers.has)(properties, 'valueLink')) {\n        newState.selectedDate = properties.valueLink.value;\n      } else if ((0, _helpers.has)(properties, 'value')) {\n        newState.selectedDate = properties.value;\n      }\n\n      this.setState(newState);\n      this.localeData = (0, _dateHelpers.getLocaleData)(properties.locale);\n      this.wrapperProps = sanitizeWrapperProps(properties);\n      this.dayProps = sanitizeDayProps(properties.dayProps);\n      this.disabledDayProps = sanitizeDisabledDayProps(properties.dayProps);\n      this.emptyDayProps = sanitizeEmptyDayProps(properties.dayProps);\n      this.navBarProps = sanitizeNavBarProps(properties.navBarProps);\n      this.prevMonthNavProps = sanitizePrevMonthNavProps(properties.prevMonthNavProps);\n      this.prevMonthNavIconProps = sanitizePrevMonthNavIconProps(properties.prevMonthNavIconProps);\n      this.nextMonthNavProps = sanitizeNextMonthNavProps(properties.nextMonthNavProps);\n      this.nextMonthNavIconProps = sanitizeNextMonthNavIconProps(properties.nextMonthNavIconProps);\n      this.monthLabelProps = sanitizeMonthLabelProps(properties.monthLabelProps);\n      this.dayLabelProps = sanitizeDayLabelProps(properties.dayLabelProps);\n      this.weekHeaderProps = sanitizeWeekHeaderProps(properties.weekHeaderProps);\n      this.weekGridProps = sanitizeWeekGridProps(properties.weekGridProps);\n      this.preventFocusStyleForTouchAndClick = (0, _helpers.has)(properties, 'preventFocusStyleForTouchAndClick') ? properties.preventFocusStyleForTouchAndClick : _datePicker4.default.preventFocusStyleForTouchAndClick;\n      (0, _injectStyle.removeAllStyles)(Object.keys(this.pseudoStyleIds));\n      updatePseudoClassStyle(this.pseudoStyleIds, properties, this.preventFocusStyleForTouchAndClick);\n    }\n    /**\n     * Removes pseudo classes from the DOM once component gets unmounted.\n     */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      (0, _injectStyle.removeAllStyles)(Object.keys(this.pseudoStyleIds));\n    }\n    /**\n     * Callback is called when wrapper is focused, it will conditionally set isFocused.\n     *\n     * In addition this.state.focusedDateKey will be set to current date of whichever month is displayed on date-picker (if this.state.focusedDateKey is undefined).\n     */\n\n    /**\n     * Callback is called when wrapper is blurred, it will reset isFocused, focusedDateKey.\n     */\n\n    /**\n      * Callback is called when wrapper receives mouseDown. Conditionally set isActive.\n      */\n\n    /**\n     * Callback is called when wrapper receives mouseUp. Reset isActive.\n     */\n\n    /**\n     * Callback is called when touch starts on wrapper. Conditionally sets isActive.\n     */\n\n    /**\n     * Callback is called when touch ends on wrapper. Reset isActive.\n     */\n\n    /**\n     * On keyDown on wrapper if date-picker is not disabled and some day is focused:\n     * 1. arrow keys will navigate calendar\n     * 2. enter key will set selectedDate of component\n     * 3. space key will set / unset selectedDate\n     * 4. props.onKeyDown will be called\n     */\n\n    /**\n     * Function will handle pageUp key down event.\n     */\n\n    /**\n     * Function will handle pageDown key down event.\n     */\n\n    /**\n     * Callback is called when some day receives mouseDown.\n     * It will conditionally set this.state.activeDay, this.state.focusedDateKey and call props.onDayMouseDown.\n     *\n     * Note: mouseEvent.button is supported by all browsers are are targeting: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n     */\n\n    /**\n     * Callback is called when some day receives mouseUp.\n     * It will reset this.state.activeDay and call props.onDayMouseUp.\n     */\n\n    /**\n     * Callback is called when some day receives MouseEnter. It will conditionally set this.state.focusedDateKey.\n     */\n\n    /**\n     * Callback is called when some day receives MouseLeave. It will reset this.state.focusedDateKey.\n     */\n\n    /**\n     * Callback is called when some day receives touchStart.\n     * It will conditionally set this.state.activeDay and call props.onDayTouchStart.\n     */\n\n    /**\n     * Callback is called when some day receives touchEnd.\n     * It will reset this.state.activeDay and call props.onDayTouchEnd.\n     */\n\n  }, {\n    key: '_triggerSelectDate',\n\n    /**\n     * Depending on whether component is controlled or uncontrolled the function will update this.state.selectedDate.\n     * It will also call props.onUpdate.\n     */\n    value: function _triggerSelectDate(day, month, year) {\n      if (!this.props.disabled && !this.props.readOnly) {\n        var selectedDate = day ? new Date(year, month, day) : undefined;\n\n        if ((0, _helpers.has)(this.props, 'valueLink')) {\n          this.props.valueLink.requestChange(selectedDate);\n        } else if (!(0, _helpers.has)(this.props, 'value')) {\n          this.setState({\n            selectedDate: selectedDate,\n            month: month,\n            year: year\n          });\n        }\n\n        if (this.props.onUpdate) {\n          this.props.onUpdate({\n            value: selectedDate\n          });\n        }\n      }\n    }\n    /**\n     * Function will select / deselect date passed to it, it is used in case of 'Space' keyDown on a day.\n     */\n\n  }, {\n    key: '_triggerToggleDate',\n    value: function _triggerToggleDate(date) {\n      if (!this.props.disabled && !this.props.readOnly) {\n        var day = void 0;\n        var month = void 0;\n        var year = void 0;\n\n        if (this.state.selectedDate && date && this.state.selectedDate.getDate() === date.getDate() && this.state.selectedDate.getMonth() === date.getMonth() && this.state.selectedDate.getFullYear() === date.getFullYear()) {\n          day = undefined;\n          month = this.state.month;\n          year = this.state.year;\n        } else {\n          day = date.getDate();\n          month = date.getMonth();\n          year = date.getFullYear();\n        }\n\n        this._triggerSelectDate(day, month, year);\n      }\n    }\n  }, {\n    key: '_focusOnTheFistDayOfTheMonth',\n    value: function _focusOnTheFistDayOfTheMonth() {\n      this.setState({\n        focusedDateKey: this.state.year + '-' + (this.state.month + 1) + '-1'\n      });\n    }\n  }, {\n    key: '_focusOnFallbackDay',\n    value: function _focusOnFallbackDay() {\n      if (this.state.lastHoveredDay) {\n        this.setState({\n          focusedDateKey: this.state.lastHoveredDay\n        });\n      } else {\n        this._focusOnTheFistDayOfTheMonth();\n      }\n    }\n    /**\n     * The function is mainly used when some day is focused and Arrow keys are pressed to navigate to some other day.\n     * days is the number of days by which focused should be moved ahead or behind.\n     */\n\n  }, {\n    key: '_focusOtherDay',\n    value: function _focusOtherDay(days) {\n      var focusedDate = (0, _dateHelpers.getDateForDateKey)(this.state.focusedDateKey);\n      var currentMonth = focusedDate.getMonth();\n      var nextFocusedDate = (0, _dateHelpers.getDateForDateKey)(this.state.focusedDateKey);\n      nextFocusedDate.setDate(nextFocusedDate.getDate() + days);\n      var nextFocusedDateKey = (0, _dateHelpers.convertDateToDateKey)(nextFocusedDate);\n      var nextMonth = nextFocusedDate.getMonth();\n\n      if (nextMonth !== currentMonth) {\n        if ((nextMonth < currentMonth || nextMonth === 11 && currentMonth === 0) && !(nextMonth === 0 && currentMonth === 11)) {\n          this._decreaseMonthYear();\n        } else if ((nextMonth > currentMonth || nextMonth === 0 && currentMonth === 11) && !(nextMonth === 11 && currentMonth === 0)) {\n          this._increaseMonthYear();\n        }\n      }\n\n      this.setState({\n        focusedDateKey: nextFocusedDateKey\n      });\n    }\n    /**\n     * The function will decrease current month in state. It will also call props.onMonthUpdate.\n     */\n\n  }, {\n    key: '_decreaseMonthYear',\n    value: function _decreaseMonthYear() {\n      var newMonth = void 0;\n      var newYear = void 0;\n\n      if (this.state.month === 0) {\n        newMonth = 11;\n        newYear = this.state.year - 1;\n      } else {\n        newMonth = this.state.month - 1;\n        newYear = this.state.year;\n      }\n\n      this.setState({\n        month: newMonth,\n        year: newYear,\n        focusedDateKey: undefined,\n        lastHoveredDay: undefined\n      });\n\n      if (this.props.onMonthUpdate) {\n        this.props.onMonthUpdate(newMonth + 1, newYear);\n      }\n    }\n    /**\n     * The function will increase current month in state. It will also call props.onMonthUpdate.\n     */\n\n  }, {\n    key: '_increaseMonthYear',\n    value: function _increaseMonthYear() {\n      var newMonth = void 0;\n      var newYear = void 0;\n\n      if (this.state.month === 11) {\n        newMonth = 0;\n        newYear = this.state.year + 1;\n      } else {\n        newMonth = this.state.month + 1;\n        newYear = this.state.year;\n      }\n\n      this.setState({\n        month: newMonth,\n        year: newYear,\n        focusedDateKey: undefined,\n        lastHoveredDay: undefined\n      });\n\n      if (this.props.onMonthUpdate) {\n        this.props.onMonthUpdate(newMonth + 1, newYear);\n      }\n    }\n  }, {\n    key: '_isWithinMinAndMax',\n    value: function _isWithinMinAndMax(date) {\n      return !(this.props.min && date < this.props.min || this.props.max && date > this.props.max);\n    }\n  }, {\n    key: '_renderPrevMonthNav',\n    value: function _renderPrevMonthNav() {\n      var prevMonthNavStyle = _extends({}, _datePicker2.default.prevMonthNavStyle, this.props.prevMonthNavStyle);\n\n      var prevMonthNavIconStyle = _extends({}, _datePicker2.default.prevMonthNavIconStyle, this.props.prevMonthNavIconStyle);\n\n      var className = this.pseudoStyleIds.prevMonthNavStyleId;\n\n      if (this.props.prevMonthNavProps) {\n        className = (0, _unionClassNames2.default)(this.props.prevMonthNavProps.className, className);\n      }\n\n      return _react2.default.createElement(_ActionArea2.default, _extends({\n        onUpdate: this._onClickPrevMonth,\n        style: prevMonthNavStyle,\n        className: className,\n        'aria-label': 'Go to previous month'\n      }, this.prevMonthNavProps), _react2.default.createElement('div', _extends({\n        style: prevMonthNavIconStyle\n      }, this.prevMonthNavIconProps)));\n    }\n  }, {\n    key: '_renderNextMonthNav',\n    value: function _renderNextMonthNav() {\n      var nextMonthNavStyle = _extends({}, _datePicker2.default.nextMonthNavStyle, this.props.nextMonthNavStyle);\n\n      var nextMonthNavIconStyle = _extends({}, _datePicker2.default.nextMonthNavIconStyle, this.props.nextMonthNavIconStyle);\n\n      var className = this.pseudoStyleIds.nextMonthNavStyleId;\n\n      if (this.props.nextMonthNavProps) {\n        className = (0, _unionClassNames2.default)(this.props.nextMonthNavProps.className, className);\n      }\n\n      return _react2.default.createElement(_ActionArea2.default, _extends({\n        onUpdate: this._onClickNextMonth,\n        style: nextMonthNavStyle,\n        className: className,\n        'aria-label': 'Go to next month'\n      }, this.nextMonthNavProps), _react2.default.createElement('div', _extends({\n        style: nextMonthNavIconStyle\n      }, this.nextMonthNavIconProps)));\n    }\n    /**\n     * Function will return jsx for rendering the nav bar for calendar.\n     * Depending on following rules it will apply styles to prevMonthNav and nextMonthNav:\n     * 1. If disabled hide navs\n     * 2. If active apply activeStyles\n     */\n\n  }, {\n    key: '_renderNavBar',\n    value: function _renderNavBar() {\n      var navBarStyle = _extends({}, _datePicker2.default.navBarStyle, this.props.navBarStyle);\n\n      var monthLabelStyle = _extends({}, _datePicker2.default.monthLabelStyle, this.props.monthLabelStyle);\n\n      return _react2.default.createElement('div', _extends({\n        style: navBarStyle\n      }, this.navBarProps), this._renderPrevMonthNav(), _react2.default.createElement('span', _extends({\n        style: monthLabelStyle,\n        role: 'heading'\n        /*\n          This label has an id as suggested in http://www.w3.org/TR/wai-aria-practices/#datepicker\n        */\n        ,\n        id: this.state.year + '-' + this.state.month\n      }, this.monthLabelProps), this.localeData.monthNames[this.state.month] + ' ' + this.state.year), this._renderNextMonthNav());\n    }\n    /**\n     * Function will return jsx for rendering the week header for calendar.\n     * Disabled styles will be applied for disabled date-picker.\n     * Day headers will be rendered using locale information.\n     */\n\n  }, {\n    key: '_renderWeekHeader',\n    value: function _renderWeekHeader() {\n      var _this2 = this;\n\n      var weekHeaderStyle = _extends({}, _datePicker2.default.weekHeaderStyle, this.props.weekHeaderStyle);\n\n      var dayLabelStyle = _extends({}, _datePicker2.default.dayLabelStyle, this.props.dayLabelStyle);\n\n      if (this.props.disabled) {\n        dayLabelStyle = _extends({}, dayLabelStyle, _datePicker2.default.disabledDayLabelStyle, this.props.disabledDayLabelStyle);\n      }\n\n      var weekendLabelStyle = _extends({}, dayLabelStyle, _datePicker2.default.weekendLabelStyle, this.props.weekendLabelStyle);\n\n      var dayNames = (0, _helpers.shift)(this.localeData.dayNamesMin, this.localeData.firstDay);\n      dayNames = this.localeData.isRTL ? (0, _helpers.reverse)(dayNames) : dayNames;\n      var weekendIndex = (7 - this.localeData.firstDay) % 7 + this.localeData.weekEnd;\n      weekendIndex = this.localeData.isRTL ? 6 - weekendIndex : weekendIndex;\n      return _react2.default.createElement('div', _extends({\n        style: weekHeaderStyle\n      }, this.weekHeaderProps), (0, _helpers.map)(dayNames, function (dayAbbr, index) {\n        return _react2.default.createElement('span', _extends({\n          key: 'dayAbbr-' + index,\n          style: index === weekendIndex ? weekendLabelStyle : dayLabelStyle,\n          role: 'columnheader'\n        }, _this2.dayLabelProps), dayAbbr);\n      }));\n    }\n    /**\n     * Function will return jsx for rendering the a day.\n     * It will apply various styles in sequence as below (styles will be additive):\n     * 1. If component is readOnly apply readOnly styles\n     * 2. If component is disabled apply disabled styles\n     *    - If component is disabled and hovered apply disableHover styles\n     * 3. If day is weekend apply weekendStyle\n     * 4. If its day in current month and component is not disabled or readOnly:\n     *    - If its current day apply todayStyle\n     *    - If this is selected day apply selectedDayStyle\n     *    - If component is hovered apply hover styles\n     *    - If component is hovered and active apply hoveredStyles + activeStyles\n     *    - If component is hovered and not active but focused and preventFocusStyleForTouchAndClick apply focus styles\n     * 5. If current day represents other months day in calendar apply otherMonthDayStyle\n     */\n\n  }, {\n    key: '_renderDay',\n    value: function _renderDay(currentDate, index) {\n      var day = currentDate.getDate();\n      var month = currentDate.getMonth();\n      var year = currentDate.getFullYear();\n      var isOtherMonth = month !== this.state.month;\n      var dateKey = (0, _dateHelpers.convertDateToDateKey)(currentDate);\n      var isDisabledDay = !this._isWithinMinAndMax(currentDate);\n      var ariaSelected = false;\n\n      var dayStyle = _extends({}, _datePicker2.default.dayStyle, this.props.dayStyle);\n\n      if (this.props.readOnly) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.readOnlyDayStyle, this.props.readOnlyDayStyle);\n      }\n\n      if (isOtherMonth) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.otherMonthDayStyle, this.props.otherMonthDayStyle);\n      }\n\n      if (this.props.disabled || isDisabledDay) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.disabledDayStyle, this.props.disabledDayStyle);\n      }\n\n      if (currentDate.getDay() === this.localeData.weekEnd) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.weekendStyle, this.props.weekendStyle);\n      }\n\n      if (day === (0, _dateHelpers.today)().getDate() && month === (0, _dateHelpers.today)().getMonth() && year === (0, _dateHelpers.today)().getFullYear()) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.todayStyle, this.props.todayStyle);\n      }\n\n      if (this.state.selectedDate && day === this.state.selectedDate.getDate() && currentDate.getMonth() === this.state.selectedDate.getMonth() && currentDate.getFullYear() === this.state.selectedDate.getFullYear()) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.selectedDayStyle, this.props.selectedDayStyle);\n        ariaSelected = true;\n      }\n\n      if (this.state.focusedDateKey === dateKey) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.focusDayStyle, this.props.focusDayStyle);\n\n        if (this.props.disabled || isDisabledDay) {\n          dayStyle = _extends({}, dayStyle, _datePicker2.default.disabledFocusDayStyle, this.props.disabledFocusDayStyle);\n        }\n      }\n\n      if (!this.props.disabled && !this.props.readOnly && this.state.activeDay === dateKey) {\n        dayStyle = _extends({}, dayStyle, _datePicker2.default.activeDayStyle, this.props.activeDayStyle);\n      }\n\n      var renderedDay = this.props.renderDay ? this.props.renderDay(currentDate) : day;\n\n      if (!this.props.showOtherMonthDate && isOtherMonth) {\n        return _react2.default.createElement('span', _extends({\n          key: 'day-' + index,\n          style: dayStyle\n        }, this.emptyDayProps));\n      }\n\n      if (isDisabledDay) {\n        return _react2.default.createElement(_DisabledDay2.default, {\n          key: 'day-' + index,\n          style: dayStyle,\n          dateKey: dateKey,\n          onDayMouseEnter: this._onDayMouseEnter,\n          onDayMouseLeave: this._onDayMouseLeave,\n          disabledDayProps: this.disabledDayProps\n        }, renderedDay);\n      }\n\n      return _react2.default.createElement(_Day2.default, {\n        key: 'day-' + index,\n        dateKey: dateKey,\n        onDayMouseDown: this._onDayMouseDown,\n        onDayMouseUp: this._onDayMouseUp,\n        onDayMouseEnter: this._onDayMouseEnter,\n        onDayMouseLeave: this._onDayMouseLeave,\n        onDayTouchStart: this._onDayTouchStart,\n        onDayTouchEnd: this._onDayTouchEnd,\n        onDayTouchCancel: this._onDayTouchCancel,\n        selected: ariaSelected,\n        style: dayStyle,\n        dayProps: this.dayProps\n      }, renderedDay);\n    }\n    /**\n     * Function will render:\n     * - main calendar component\n     * - call methods to render navBar and week header\n     * - get array of weeks in a month and for each day in the week call method to render day\n     *\n     * It will apply styles sequentially according to Wrapper according to following rules:\n     * 1. If component is readOnly apply readOnlyStyle\n     * 2. If component is disabled apply disabledStyle\n     *    - If disabled component is hovered apply disabledHoverStyle\n     * 3. If component is not disabled:\n     *    - If component is hovered apply hover style\n     *    - If component is hovered and active apply hover + active styles\n     *    - If component is hovered and focused but not active and preventFocusStyleForTouchAndClick is true apply focusStyles\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var style = _extends({}, _datePicker2.default.style, this.props.style);\n\n      if (this.props.readOnly) {\n        style = _extends({}, style, _datePicker2.default.readOnlyStyle, this.props.readOnlyStyle);\n      }\n\n      if (this.props.disabled) {\n        style = _extends({}, style, _datePicker2.default.disabledStyle, this.props.disabledStyle);\n      }\n\n      if (this.preventFocusStyleForTouchAndClick && this.state.isFocused) {\n        style = _extends({}, style, _datePicker2.default.focusStyle, this.props.focusStyle);\n      }\n\n      if (this.state.isActive) {\n        style = _extends({}, style, _datePicker2.default.activeStyle, this.props.activeStyle);\n      }\n\n      var weekArray = (0, _dateHelpers.getWeekArrayForMonth)(this.state.month, this.state.year, this.localeData.firstDay);\n      var tabIndex = !this.props.disabled ? this.props.tabIndex : false;\n      return _react2.default.createElement('div', _extends({\n        tabIndex: tabIndex,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        onKeyDown: this._onKeyDown,\n        onMouseDown: this._onMouseDown,\n        onMouseUp: this._onMouseUp,\n        onTouchStart: this._onTouchStart,\n        onTouchEnd: this._onTouchEnd,\n        onTouchCancel: this._onTouchCancel,\n        'aria-label': this.props['aria-label'],\n        'aria-disabled': this.props.disabled,\n        'aria-readonly': this.props.readOnly,\n        style: style,\n        className: (0, _unionClassNames2.default)(this.props.className, this.pseudoStyleIds.styleId)\n      }, this.wrapperProps), this._renderNavBar(), _react2.default.createElement('div', _extends({\n        role: 'grid',\n        style: _datePicker2.default.weekGridStyle\n      }, this.weekGridProps), this._renderWeekHeader(), (0, _helpers.map)(weekArray, function (week) {\n        var weekDays = _this3.localeData.isRTL ? (0, _helpers.reverse)(week) : week;\n        return (0, _helpers.map)(weekDays, function (day, dayIndex) {\n          return _this3._renderDay(day, dayIndex);\n        });\n      })));\n    }\n  }]);\n\n  return DatePicker;\n}(_react.Component);\n\nDatePicker.displayName = 'DatePicker';\nDatePicker.propTypes = datePickerPropTypes;\nDatePicker.defaultProps = {\n  tabIndex: 0,\n  'aria-label': 'datepicker',\n  disabled: false,\n  readOnly: false,\n  showOtherMonthDate: true\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this._onFocus = function () {\n    if (!_this4.props.disabled) {\n      if (!_this4.state.isActive) {\n        var newState = {\n          isFocused: true\n        };\n\n        if (!_this4.state.focusedDateKey) {\n          if (_this4.state.selectedDate && _this4.state.selectedDate.getMonth() === _this4.state.month && _this4.state.selectedDate.getFullYear() === _this4.state.year) {\n            newState.focusedDateKey = (0, _dateHelpers.convertDateToDateKey)(_this4.state.selectedDate);\n          } else if (_this4.state.month === (0, _dateHelpers.today)().getMonth() && _this4.state.year === (0, _dateHelpers.today)().getFullYear()) {\n            newState.focusedDateKey = (0, _dateHelpers.getDateKey)((0, _dateHelpers.today)().getFullYear(), (0, _dateHelpers.today)().getMonth() + 1, (0, _dateHelpers.today)().getDate());\n          } else {\n            newState.focusedDateKey = (0, _dateHelpers.getDateKey)(_this4.state.year, _this4.state.month + 1, 1);\n          }\n        }\n\n        _this4.setState(newState);\n      }\n    }\n\n    if (_this4.props.onFocus) {\n      _this4.props.onFocus(event);\n    }\n  };\n\n  this._onBlur = function () {\n    if (!_this4.props.disabled) {\n      _this4.setState({\n        isFocused: false,\n        focusedDateKey: undefined\n      });\n    }\n\n    if (_this4.props.onBlur) {\n      _this4.props.onBlur(event);\n    }\n  };\n\n  this._onMouseDown = function (event) {\n    if (!_this4.props.disabled && event.button === 0) {\n      _this4.setState({\n        isActive: true\n      });\n    }\n\n    if (_this4.props.onMouseDown) {\n      _this4.props.onMouseDown(event);\n    }\n  };\n\n  this._onMouseUp = function (event) {\n    if (!_this4.props.disabled && event.button === 0) {\n      _this4.setState({\n        isActive: false\n      });\n    }\n\n    if (_this4.props.onMouseUp) {\n      _this4.props.onMouseUp(event);\n    }\n  };\n\n  this._onTouchStart = function (event) {\n    if (!_this4.props.disabled && event.touches.length === 1) {\n      _this4.setState({\n        isActive: true\n      });\n    }\n\n    if (_this4.props.onTouchStart) {\n      _this4.props.onTouchStart(event);\n    }\n  };\n\n  this._onTouchEnd = function () {\n    if (!_this4.props.disabled) {\n      _this4.setState({\n        isActive: false\n      });\n    }\n\n    if (_this4.props.onTouchEnd) {\n      _this4.props.onTouchEnd(event);\n    }\n  };\n\n  this._onTouchCancel = function () {\n    _this4.setState({\n      isActive: false\n    });\n\n    if (_this4.props.onTouchCancel) {\n      _this4.props.onTouchCancel(event);\n    }\n  };\n\n  this._onKeyDown = function (event) {\n    if (!_this4.props.disabled) {\n      if (event.key === 'Home') {\n        // Moves to the first day of the current month.\n        event.preventDefault();\n\n        _this4._focusOnTheFistDayOfTheMonth();\n      } else if (event.key === 'End') {\n        // Moves to the last day of the current month.\n        event.preventDefault();\n        var date = (0, _dateHelpers.getLastDayForMonth)(_this4.state.year, _this4.state.month);\n\n        _this4.setState({\n          focusedDateKey: (0, _dateHelpers.convertDateToDateKey)(date)\n        });\n      }\n\n      if (_this4.state.focusedDateKey) {\n        if (event.key === 'ArrowDown') {\n          event.preventDefault();\n\n          _this4._focusOtherDay(7);\n        } else if (event.key === 'ArrowUp') {\n          event.preventDefault();\n\n          _this4._focusOtherDay(-7);\n        } else if (event.key === 'ArrowLeft') {\n          event.preventDefault();\n\n          _this4._focusOtherDay(_this4.localeData.isRTL ? 1 : -1);\n        } else if (event.key === 'ArrowRight') {\n          event.preventDefault();\n\n          _this4._focusOtherDay(_this4.localeData.isRTL ? -1 : 1);\n        } else if (event.key === 'PageUp') {\n          _this4._onPageUpKeyDown(event);\n        } else if (event.key === 'PageDown') {\n          _this4._onPageDownKeyDown(event);\n        } else if (event.key === 'Enter') {\n          event.preventDefault();\n\n          var _date = (0, _dateHelpers.getDateForDateKey)(_this4.state.focusedDateKey);\n\n          if (_this4._isWithinMinAndMax(_date)) {\n            _this4._triggerSelectDate(_date.getDate(), _date.getMonth(), _date.getFullYear());\n          }\n        } else if (event.key === ' ') {\n          event.preventDefault();\n\n          var _date2 = (0, _dateHelpers.getDateForDateKey)(_this4.state.focusedDateKey);\n\n          if (_this4._isWithinMinAndMax(_date2)) {\n            _this4._triggerToggleDate(_date2);\n          }\n        }\n      } else {\n        if (event.key === 'ArrowDown' || event.key === 'ArrowUp' || event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n          event.preventDefault();\n\n          _this4._focusOnFallbackDay();\n        }\n      }\n    }\n\n    if (_this4.props.onKeyDown) {\n      _this4.props.onKeyDown(event);\n    }\n  };\n\n  this._onPageUpKeyDown = function (event) {\n    // Moves to the same date in the previous month.\n    event.preventDefault(); // TODO extract this to a helper function and test various edge cases\n\n    var date = void 0;\n    var lastDayInMonth = (0, _dateHelpers.getLastDayForMonth)(_this4.state.year, _this4.state.month - 1);\n    var focusedDate = (0, _dateHelpers.getDateForDateKey)(_this4.state.focusedDateKey); // jump from March 30 to Feb 29\n\n    if (focusedDate.getDate() > lastDayInMonth.getDate()) {\n      date = lastDayInMonth;\n    } else {\n      date = (0, _dateHelpers.getDateForDateKey)(_this4.state.focusedDateKey);\n      date.setMonth(date.getMonth() - 1);\n    }\n\n    _this4.setState({\n      focusedDateKey: (0, _dateHelpers.convertDateToDateKey)(date),\n      month: date.getMonth(),\n      year: date.getFullYear(),\n      lastHoveredDay: undefined\n    });\n  };\n\n  this._onPageDownKeyDown = function (event) {\n    // Moves to the same date in the next month.\n    event.preventDefault(); // TODO extract this to a helper function and test various edge cases\n\n    var date = void 0;\n    var lastDayInMonth = (0, _dateHelpers.getLastDayForMonth)(_this4.state.year, _this4.state.month + 1);\n    var focusedDate = (0, _dateHelpers.getDateForDateKey)(_this4.state.focusedDateKey); // Use case: Jump from Jan 31 to Feb 29\n\n    if (focusedDate.getDate() > lastDayInMonth.getDate()) {\n      date = lastDayInMonth;\n    } else {\n      date = (0, _dateHelpers.getDateForDateKey)(_this4.state.focusedDateKey);\n      date.setMonth(date.getMonth() + 1);\n    }\n\n    _this4.setState({\n      focusedDateKey: (0, _dateHelpers.convertDateToDateKey)(date),\n      month: date.getMonth(),\n      year: date.getFullYear(),\n      lastHoveredDay: undefined\n    });\n  };\n\n  this._onDayMouseDown = function (dateKey, event) {\n    if (event.button === 0 && !_this4.props.disabled && !_this4.props.readOnly) {\n      _this4.setState({\n        activeDay: dateKey\n      });\n    }\n\n    if (_this4.props.dayProps && _this4.props.dayProps.onMouseDown) {\n      _this4.props.dayProps.onMouseDown(event);\n    }\n  };\n\n  this._onDayMouseUp = function (dateKey, event) {\n    if (event.button === 0 && !_this4.props.disabled && !_this4.props.readOnly && _this4.state.activeDay === dateKey) {\n      var date = (0, _dateHelpers.getDateForDateKey)(dateKey);\n      var day = date.getDate();\n      var month = date.getMonth();\n      var year = date.getFullYear();\n\n      _this4._triggerSelectDate(day, month, year);\n\n      _this4.setState({\n        // Note: updating focusedDateKey in mouseEnter normally would be good enough,\n        // but it is necessary to set on mouseUp for the following edge case:\n        // A user moves the cursor over a day. Moves on with the keyboard and\n        // then without moving again just pressing the mouse. In this case\n        // mouseEnter did not get called again.\n        focusedDateKey: dateKey,\n        activeDay: undefined\n      });\n    }\n\n    if (_this4.props.dayProps && _this4.props.dayProps.onMouseUp) {\n      _this4.props.dayProps.onMouseUp(event);\n    }\n  };\n\n  this._onDayMouseEnter = function (dateKey, event) {\n    if (!_this4.props.readOnly) {\n      _this4.setState({\n        focusedDateKey: dateKey\n      });\n    }\n\n    if (_this4.props.dayProps && _this4.props.dayProps.onMouseEnter) {\n      _this4.props.dayProps.onMouseEnter(event);\n    }\n  };\n\n  this._onDayMouseLeave = function (dateKey, event) {\n    if (!_this4.props.readOnly && event.button === 0 && _this4.state.focusedDateKey === dateKey) {\n      _this4.setState({\n        focusedDateKey: undefined,\n        lastHoveredDay: _this4.state.focusedDateKey\n      });\n    }\n\n    if (_this4.props.dayProps && _this4.props.dayProps.onMouseLeave) {\n      _this4.props.dayProps.onMouseLeave(event);\n    }\n  };\n\n  this._onDayTouchStart = function (dateKey, event) {\n    if (!_this4.props.disabled && !_this4.props.readOnly && event.touches.length === 1) {\n      _this4.setState({\n        activeDay: dateKey\n      });\n    }\n\n    if (_this4.props.dayProps && _this4.props.dayProps.onTouchStart) {\n      _this4.props.dayProps.onTouchStart(event);\n    }\n  };\n\n  this._onDayTouchEnd = function (dateKey, event) {\n    if (!_this4.props.disabled && !_this4.props.readOnly) {\n      var date = (0, _dateHelpers.getDateForDateKey)(dateKey);\n      var day = date.getDate();\n      var month = date.getMonth();\n      var year = date.getFullYear();\n\n      _this4._triggerSelectDate(day, month, year);\n\n      if (_this4.state.activeDay === dateKey) {\n        _this4.setState({\n          activeDay: undefined\n        });\n      }\n    }\n\n    if (_this4.props.dayProps && _this4.props.dayProps.onTouchEnd) {\n      _this4.props.dayProps.onTouchEnd(event);\n    }\n  };\n\n  this._onDayTouchCancel = function (dateKey, event) {\n    _this4.setState({\n      activeDay: undefined\n    });\n\n    if (_this4.props.dayProps && _this4.props.dayProps.onTouchCancel) {\n      _this4.props.dayProps.onTouchCancel(event);\n    }\n  };\n\n  this._onClickPrevMonth = function () {\n    _this4._decreaseMonthYear();\n\n    if (_this4.props.prevMonthNavProps && _this4.props.prevMonthNavProps.onClick) {\n      _this4.props.prevMonthNavProps.onClick(event);\n    }\n  };\n\n  this._onClickNextMonth = function () {\n    _this4._increaseMonthYear();\n\n    if (_this4.props.nextMonthNavProps && _this4.props.nextMonthNavProps.onClick) {\n      _this4.props.nextMonthNavProps.onClick(event);\n    }\n  };\n};\n\nexports.default = DatePicker;","map":null,"metadata":{},"sourceType":"script"}